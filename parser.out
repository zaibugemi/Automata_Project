Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DECREMENT
    INCREMENT

Grammar

Rule 0     S' -> stmt
Rule 1     stmt -> IDENTIFIER EQUAL exp
Rule 2     stmt -> PRINT LPARAN exps RPARAN
Rule 3     exps -> exp
Rule 4     exps -> exp COMMA exps
Rule 5     stmt -> exp
Rule 6     exp -> exp PLUS exp
Rule 7     exp -> exp MINUS exp
Rule 8     exp -> exp MULTIPLY exp
Rule 9     exp -> exp DIVIDE exp
Rule 10    exp -> exp MODULO exp
Rule 11    exp -> exp POWER exp
Rule 12    exp -> exp LE exp
Rule 13    exp -> exp GE exp
Rule 14    exp -> exp ISEQUAL exp
Rule 15    exp -> exp NOTEQUAL exp
Rule 16    exp -> exp LT exp
Rule 17    exp -> exp GT exp
Rule 18    exp -> exp AND exp
Rule 19    exp -> exp OR exp
Rule 20    exp -> LPARAN exp RPARAN
Rule 21    exp -> NOT exp
Rule 22    exp -> INT
Rule 23    exp -> DOUBLE
Rule 24    exp -> CHAR
Rule 25    exp -> STRING
Rule 26    exp -> IDENTIFIER

Terminals, with rules where they appear

AND                  : 18
CHAR                 : 24
COMMA                : 4
DECREMENT            : 
DIVIDE               : 9
DOUBLE               : 23
EQUAL                : 1
GE                   : 13
GT                   : 17
IDENTIFIER           : 1 26
INCREMENT            : 
INT                  : 22
ISEQUAL              : 14
LE                   : 12
LPARAN               : 2 20
LT                   : 16
MINUS                : 7
MODULO               : 10
MULTIPLY             : 8
NOT                  : 21
NOTEQUAL             : 15
OR                   : 19
PLUS                 : 6
POWER                : 11
PRINT                : 2
RPARAN               : 2 20
STRING               : 25
error                : 

Nonterminals, with rules where they appear

exp                  : 1 3 4 5 6 6 7 7 8 8 9 9 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17 17 18 18 19 19 20 21
exps                 : 2 4
stmt                 : 0

Parsing method: LALR

state 0

    (0) S' -> . stmt
    (1) stmt -> . IDENTIFIER EQUAL exp
    (2) stmt -> . PRINT LPARAN exps RPARAN
    (5) stmt -> . exp
    (6) exp -> . exp PLUS exp
    (7) exp -> . exp MINUS exp
    (8) exp -> . exp MULTIPLY exp
    (9) exp -> . exp DIVIDE exp
    (10) exp -> . exp MODULO exp
    (11) exp -> . exp POWER exp
    (12) exp -> . exp LE exp
    (13) exp -> . exp GE exp
    (14) exp -> . exp ISEQUAL exp
    (15) exp -> . exp NOTEQUAL exp
    (16) exp -> . exp LT exp
    (17) exp -> . exp GT exp
    (18) exp -> . exp AND exp
    (19) exp -> . exp OR exp
    (20) exp -> . LPARAN exp RPARAN
    (21) exp -> . NOT exp
    (22) exp -> . INT
    (23) exp -> . DOUBLE
    (24) exp -> . CHAR
    (25) exp -> . STRING
    (26) exp -> . IDENTIFIER

    IDENTIFIER      shift and go to state 2
    PRINT           shift and go to state 4
    LPARAN          shift and go to state 5
    NOT             shift and go to state 6
    INT             shift and go to state 7
    DOUBLE          shift and go to state 8
    CHAR            shift and go to state 9
    STRING          shift and go to state 10

    stmt                           shift and go to state 1
    exp                            shift and go to state 3

state 1

    (0) S' -> stmt .



state 2

    (1) stmt -> IDENTIFIER . EQUAL exp
    (26) exp -> IDENTIFIER .

    EQUAL           shift and go to state 11
    PLUS            reduce using rule 26 (exp -> IDENTIFIER .)
    MINUS           reduce using rule 26 (exp -> IDENTIFIER .)
    MULTIPLY        reduce using rule 26 (exp -> IDENTIFIER .)
    DIVIDE          reduce using rule 26 (exp -> IDENTIFIER .)
    MODULO          reduce using rule 26 (exp -> IDENTIFIER .)
    POWER           reduce using rule 26 (exp -> IDENTIFIER .)
    LE              reduce using rule 26 (exp -> IDENTIFIER .)
    GE              reduce using rule 26 (exp -> IDENTIFIER .)
    ISEQUAL         reduce using rule 26 (exp -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 26 (exp -> IDENTIFIER .)
    LT              reduce using rule 26 (exp -> IDENTIFIER .)
    GT              reduce using rule 26 (exp -> IDENTIFIER .)
    AND             reduce using rule 26 (exp -> IDENTIFIER .)
    OR              reduce using rule 26 (exp -> IDENTIFIER .)
    $end            reduce using rule 26 (exp -> IDENTIFIER .)


state 3

    (5) stmt -> exp .
    (6) exp -> exp . PLUS exp
    (7) exp -> exp . MINUS exp
    (8) exp -> exp . MULTIPLY exp
    (9) exp -> exp . DIVIDE exp
    (10) exp -> exp . MODULO exp
    (11) exp -> exp . POWER exp
    (12) exp -> exp . LE exp
    (13) exp -> exp . GE exp
    (14) exp -> exp . ISEQUAL exp
    (15) exp -> exp . NOTEQUAL exp
    (16) exp -> exp . LT exp
    (17) exp -> exp . GT exp
    (18) exp -> exp . AND exp
    (19) exp -> exp . OR exp

    $end            reduce using rule 5 (stmt -> exp .)
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13
    MULTIPLY        shift and go to state 14
    DIVIDE          shift and go to state 15
    MODULO          shift and go to state 16
    POWER           shift and go to state 17
    LE              shift and go to state 18
    GE              shift and go to state 19
    ISEQUAL         shift and go to state 20
    NOTEQUAL        shift and go to state 21
    LT              shift and go to state 22
    GT              shift and go to state 23
    AND             shift and go to state 24
    OR              shift and go to state 25


state 4

    (2) stmt -> PRINT . LPARAN exps RPARAN

    LPARAN          shift and go to state 26


state 5

    (20) exp -> LPARAN . exp RPARAN
    (6) exp -> . exp PLUS exp
    (7) exp -> . exp MINUS exp
    (8) exp -> . exp MULTIPLY exp
    (9) exp -> . exp DIVIDE exp
    (10) exp -> . exp MODULO exp
    (11) exp -> . exp POWER exp
    (12) exp -> . exp LE exp
    (13) exp -> . exp GE exp
    (14) exp -> . exp ISEQUAL exp
    (15) exp -> . exp NOTEQUAL exp
    (16) exp -> . exp LT exp
    (17) exp -> . exp GT exp
    (18) exp -> . exp AND exp
    (19) exp -> . exp OR exp
    (20) exp -> . LPARAN exp RPARAN
    (21) exp -> . NOT exp
    (22) exp -> . INT
    (23) exp -> . DOUBLE
    (24) exp -> . CHAR
    (25) exp -> . STRING
    (26) exp -> . IDENTIFIER

    LPARAN          shift and go to state 5
    NOT             shift and go to state 6
    INT             shift and go to state 7
    DOUBLE          shift and go to state 8
    CHAR            shift and go to state 9
    STRING          shift and go to state 10
    IDENTIFIER      shift and go to state 28

    exp                            shift and go to state 27

state 6

    (21) exp -> NOT . exp
    (6) exp -> . exp PLUS exp
    (7) exp -> . exp MINUS exp
    (8) exp -> . exp MULTIPLY exp
    (9) exp -> . exp DIVIDE exp
    (10) exp -> . exp MODULO exp
    (11) exp -> . exp POWER exp
    (12) exp -> . exp LE exp
    (13) exp -> . exp GE exp
    (14) exp -> . exp ISEQUAL exp
    (15) exp -> . exp NOTEQUAL exp
    (16) exp -> . exp LT exp
    (17) exp -> . exp GT exp
    (18) exp -> . exp AND exp
    (19) exp -> . exp OR exp
    (20) exp -> . LPARAN exp RPARAN
    (21) exp -> . NOT exp
    (22) exp -> . INT
    (23) exp -> . DOUBLE
    (24) exp -> . CHAR
    (25) exp -> . STRING
    (26) exp -> . IDENTIFIER

    LPARAN          shift and go to state 5
    NOT             shift and go to state 6
    INT             shift and go to state 7
    DOUBLE          shift and go to state 8
    CHAR            shift and go to state 9
    STRING          shift and go to state 10
    IDENTIFIER      shift and go to state 28

    exp                            shift and go to state 29

state 7

    (22) exp -> INT .

    PLUS            reduce using rule 22 (exp -> INT .)
    MINUS           reduce using rule 22 (exp -> INT .)
    MULTIPLY        reduce using rule 22 (exp -> INT .)
    DIVIDE          reduce using rule 22 (exp -> INT .)
    MODULO          reduce using rule 22 (exp -> INT .)
    POWER           reduce using rule 22 (exp -> INT .)
    LE              reduce using rule 22 (exp -> INT .)
    GE              reduce using rule 22 (exp -> INT .)
    ISEQUAL         reduce using rule 22 (exp -> INT .)
    NOTEQUAL        reduce using rule 22 (exp -> INT .)
    LT              reduce using rule 22 (exp -> INT .)
    GT              reduce using rule 22 (exp -> INT .)
    AND             reduce using rule 22 (exp -> INT .)
    OR              reduce using rule 22 (exp -> INT .)
    $end            reduce using rule 22 (exp -> INT .)
    RPARAN          reduce using rule 22 (exp -> INT .)
    COMMA           reduce using rule 22 (exp -> INT .)


state 8

    (23) exp -> DOUBLE .

    PLUS            reduce using rule 23 (exp -> DOUBLE .)
    MINUS           reduce using rule 23 (exp -> DOUBLE .)
    MULTIPLY        reduce using rule 23 (exp -> DOUBLE .)
    DIVIDE          reduce using rule 23 (exp -> DOUBLE .)
    MODULO          reduce using rule 23 (exp -> DOUBLE .)
    POWER           reduce using rule 23 (exp -> DOUBLE .)
    LE              reduce using rule 23 (exp -> DOUBLE .)
    GE              reduce using rule 23 (exp -> DOUBLE .)
    ISEQUAL         reduce using rule 23 (exp -> DOUBLE .)
    NOTEQUAL        reduce using rule 23 (exp -> DOUBLE .)
    LT              reduce using rule 23 (exp -> DOUBLE .)
    GT              reduce using rule 23 (exp -> DOUBLE .)
    AND             reduce using rule 23 (exp -> DOUBLE .)
    OR              reduce using rule 23 (exp -> DOUBLE .)
    $end            reduce using rule 23 (exp -> DOUBLE .)
    RPARAN          reduce using rule 23 (exp -> DOUBLE .)
    COMMA           reduce using rule 23 (exp -> DOUBLE .)


state 9

    (24) exp -> CHAR .

    PLUS            reduce using rule 24 (exp -> CHAR .)
    MINUS           reduce using rule 24 (exp -> CHAR .)
    MULTIPLY        reduce using rule 24 (exp -> CHAR .)
    DIVIDE          reduce using rule 24 (exp -> CHAR .)
    MODULO          reduce using rule 24 (exp -> CHAR .)
    POWER           reduce using rule 24 (exp -> CHAR .)
    LE              reduce using rule 24 (exp -> CHAR .)
    GE              reduce using rule 24 (exp -> CHAR .)
    ISEQUAL         reduce using rule 24 (exp -> CHAR .)
    NOTEQUAL        reduce using rule 24 (exp -> CHAR .)
    LT              reduce using rule 24 (exp -> CHAR .)
    GT              reduce using rule 24 (exp -> CHAR .)
    AND             reduce using rule 24 (exp -> CHAR .)
    OR              reduce using rule 24 (exp -> CHAR .)
    $end            reduce using rule 24 (exp -> CHAR .)
    RPARAN          reduce using rule 24 (exp -> CHAR .)
    COMMA           reduce using rule 24 (exp -> CHAR .)


state 10

    (25) exp -> STRING .

    PLUS            reduce using rule 25 (exp -> STRING .)
    MINUS           reduce using rule 25 (exp -> STRING .)
    MULTIPLY        reduce using rule 25 (exp -> STRING .)
    DIVIDE          reduce using rule 25 (exp -> STRING .)
    MODULO          reduce using rule 25 (exp -> STRING .)
    POWER           reduce using rule 25 (exp -> STRING .)
    LE              reduce using rule 25 (exp -> STRING .)
    GE              reduce using rule 25 (exp -> STRING .)
    ISEQUAL         reduce using rule 25 (exp -> STRING .)
    NOTEQUAL        reduce using rule 25 (exp -> STRING .)
    LT              reduce using rule 25 (exp -> STRING .)
    GT              reduce using rule 25 (exp -> STRING .)
    AND             reduce using rule 25 (exp -> STRING .)
    OR              reduce using rule 25 (exp -> STRING .)
    $end            reduce using rule 25 (exp -> STRING .)
    RPARAN          reduce using rule 25 (exp -> STRING .)
    COMMA           reduce using rule 25 (exp -> STRING .)


state 11

    (1) stmt -> IDENTIFIER EQUAL . exp
    (6) exp -> . exp PLUS exp
    (7) exp -> . exp MINUS exp
    (8) exp -> . exp MULTIPLY exp
    (9) exp -> . exp DIVIDE exp
    (10) exp -> . exp MODULO exp
    (11) exp -> . exp POWER exp
    (12) exp -> . exp LE exp
    (13) exp -> . exp GE exp
    (14) exp -> . exp ISEQUAL exp
    (15) exp -> . exp NOTEQUAL exp
    (16) exp -> . exp LT exp
    (17) exp -> . exp GT exp
    (18) exp -> . exp AND exp
    (19) exp -> . exp OR exp
    (20) exp -> . LPARAN exp RPARAN
    (21) exp -> . NOT exp
    (22) exp -> . INT
    (23) exp -> . DOUBLE
    (24) exp -> . CHAR
    (25) exp -> . STRING
    (26) exp -> . IDENTIFIER

    LPARAN          shift and go to state 5
    NOT             shift and go to state 6
    INT             shift and go to state 7
    DOUBLE          shift and go to state 8
    CHAR            shift and go to state 9
    STRING          shift and go to state 10
    IDENTIFIER      shift and go to state 28

    exp                            shift and go to state 30

state 12

    (6) exp -> exp PLUS . exp
    (6) exp -> . exp PLUS exp
    (7) exp -> . exp MINUS exp
    (8) exp -> . exp MULTIPLY exp
    (9) exp -> . exp DIVIDE exp
    (10) exp -> . exp MODULO exp
    (11) exp -> . exp POWER exp
    (12) exp -> . exp LE exp
    (13) exp -> . exp GE exp
    (14) exp -> . exp ISEQUAL exp
    (15) exp -> . exp NOTEQUAL exp
    (16) exp -> . exp LT exp
    (17) exp -> . exp GT exp
    (18) exp -> . exp AND exp
    (19) exp -> . exp OR exp
    (20) exp -> . LPARAN exp RPARAN
    (21) exp -> . NOT exp
    (22) exp -> . INT
    (23) exp -> . DOUBLE
    (24) exp -> . CHAR
    (25) exp -> . STRING
    (26) exp -> . IDENTIFIER

    LPARAN          shift and go to state 5
    NOT             shift and go to state 6
    INT             shift and go to state 7
    DOUBLE          shift and go to state 8
    CHAR            shift and go to state 9
    STRING          shift and go to state 10
    IDENTIFIER      shift and go to state 28

    exp                            shift and go to state 31

state 13

    (7) exp -> exp MINUS . exp
    (6) exp -> . exp PLUS exp
    (7) exp -> . exp MINUS exp
    (8) exp -> . exp MULTIPLY exp
    (9) exp -> . exp DIVIDE exp
    (10) exp -> . exp MODULO exp
    (11) exp -> . exp POWER exp
    (12) exp -> . exp LE exp
    (13) exp -> . exp GE exp
    (14) exp -> . exp ISEQUAL exp
    (15) exp -> . exp NOTEQUAL exp
    (16) exp -> . exp LT exp
    (17) exp -> . exp GT exp
    (18) exp -> . exp AND exp
    (19) exp -> . exp OR exp
    (20) exp -> . LPARAN exp RPARAN
    (21) exp -> . NOT exp
    (22) exp -> . INT
    (23) exp -> . DOUBLE
    (24) exp -> . CHAR
    (25) exp -> . STRING
    (26) exp -> . IDENTIFIER

    LPARAN          shift and go to state 5
    NOT             shift and go to state 6
    INT             shift and go to state 7
    DOUBLE          shift and go to state 8
    CHAR            shift and go to state 9
    STRING          shift and go to state 10
    IDENTIFIER      shift and go to state 28

    exp                            shift and go to state 32

state 14

    (8) exp -> exp MULTIPLY . exp
    (6) exp -> . exp PLUS exp
    (7) exp -> . exp MINUS exp
    (8) exp -> . exp MULTIPLY exp
    (9) exp -> . exp DIVIDE exp
    (10) exp -> . exp MODULO exp
    (11) exp -> . exp POWER exp
    (12) exp -> . exp LE exp
    (13) exp -> . exp GE exp
    (14) exp -> . exp ISEQUAL exp
    (15) exp -> . exp NOTEQUAL exp
    (16) exp -> . exp LT exp
    (17) exp -> . exp GT exp
    (18) exp -> . exp AND exp
    (19) exp -> . exp OR exp
    (20) exp -> . LPARAN exp RPARAN
    (21) exp -> . NOT exp
    (22) exp -> . INT
    (23) exp -> . DOUBLE
    (24) exp -> . CHAR
    (25) exp -> . STRING
    (26) exp -> . IDENTIFIER

    LPARAN          shift and go to state 5
    NOT             shift and go to state 6
    INT             shift and go to state 7
    DOUBLE          shift and go to state 8
    CHAR            shift and go to state 9
    STRING          shift and go to state 10
    IDENTIFIER      shift and go to state 28

    exp                            shift and go to state 33

state 15

    (9) exp -> exp DIVIDE . exp
    (6) exp -> . exp PLUS exp
    (7) exp -> . exp MINUS exp
    (8) exp -> . exp MULTIPLY exp
    (9) exp -> . exp DIVIDE exp
    (10) exp -> . exp MODULO exp
    (11) exp -> . exp POWER exp
    (12) exp -> . exp LE exp
    (13) exp -> . exp GE exp
    (14) exp -> . exp ISEQUAL exp
    (15) exp -> . exp NOTEQUAL exp
    (16) exp -> . exp LT exp
    (17) exp -> . exp GT exp
    (18) exp -> . exp AND exp
    (19) exp -> . exp OR exp
    (20) exp -> . LPARAN exp RPARAN
    (21) exp -> . NOT exp
    (22) exp -> . INT
    (23) exp -> . DOUBLE
    (24) exp -> . CHAR
    (25) exp -> . STRING
    (26) exp -> . IDENTIFIER

    LPARAN          shift and go to state 5
    NOT             shift and go to state 6
    INT             shift and go to state 7
    DOUBLE          shift and go to state 8
    CHAR            shift and go to state 9
    STRING          shift and go to state 10
    IDENTIFIER      shift and go to state 28

    exp                            shift and go to state 34

state 16

    (10) exp -> exp MODULO . exp
    (6) exp -> . exp PLUS exp
    (7) exp -> . exp MINUS exp
    (8) exp -> . exp MULTIPLY exp
    (9) exp -> . exp DIVIDE exp
    (10) exp -> . exp MODULO exp
    (11) exp -> . exp POWER exp
    (12) exp -> . exp LE exp
    (13) exp -> . exp GE exp
    (14) exp -> . exp ISEQUAL exp
    (15) exp -> . exp NOTEQUAL exp
    (16) exp -> . exp LT exp
    (17) exp -> . exp GT exp
    (18) exp -> . exp AND exp
    (19) exp -> . exp OR exp
    (20) exp -> . LPARAN exp RPARAN
    (21) exp -> . NOT exp
    (22) exp -> . INT
    (23) exp -> . DOUBLE
    (24) exp -> . CHAR
    (25) exp -> . STRING
    (26) exp -> . IDENTIFIER

    LPARAN          shift and go to state 5
    NOT             shift and go to state 6
    INT             shift and go to state 7
    DOUBLE          shift and go to state 8
    CHAR            shift and go to state 9
    STRING          shift and go to state 10
    IDENTIFIER      shift and go to state 28

    exp                            shift and go to state 35

state 17

    (11) exp -> exp POWER . exp
    (6) exp -> . exp PLUS exp
    (7) exp -> . exp MINUS exp
    (8) exp -> . exp MULTIPLY exp
    (9) exp -> . exp DIVIDE exp
    (10) exp -> . exp MODULO exp
    (11) exp -> . exp POWER exp
    (12) exp -> . exp LE exp
    (13) exp -> . exp GE exp
    (14) exp -> . exp ISEQUAL exp
    (15) exp -> . exp NOTEQUAL exp
    (16) exp -> . exp LT exp
    (17) exp -> . exp GT exp
    (18) exp -> . exp AND exp
    (19) exp -> . exp OR exp
    (20) exp -> . LPARAN exp RPARAN
    (21) exp -> . NOT exp
    (22) exp -> . INT
    (23) exp -> . DOUBLE
    (24) exp -> . CHAR
    (25) exp -> . STRING
    (26) exp -> . IDENTIFIER

    LPARAN          shift and go to state 5
    NOT             shift and go to state 6
    INT             shift and go to state 7
    DOUBLE          shift and go to state 8
    CHAR            shift and go to state 9
    STRING          shift and go to state 10
    IDENTIFIER      shift and go to state 28

    exp                            shift and go to state 36

state 18

    (12) exp -> exp LE . exp
    (6) exp -> . exp PLUS exp
    (7) exp -> . exp MINUS exp
    (8) exp -> . exp MULTIPLY exp
    (9) exp -> . exp DIVIDE exp
    (10) exp -> . exp MODULO exp
    (11) exp -> . exp POWER exp
    (12) exp -> . exp LE exp
    (13) exp -> . exp GE exp
    (14) exp -> . exp ISEQUAL exp
    (15) exp -> . exp NOTEQUAL exp
    (16) exp -> . exp LT exp
    (17) exp -> . exp GT exp
    (18) exp -> . exp AND exp
    (19) exp -> . exp OR exp
    (20) exp -> . LPARAN exp RPARAN
    (21) exp -> . NOT exp
    (22) exp -> . INT
    (23) exp -> . DOUBLE
    (24) exp -> . CHAR
    (25) exp -> . STRING
    (26) exp -> . IDENTIFIER

    LPARAN          shift and go to state 5
    NOT             shift and go to state 6
    INT             shift and go to state 7
    DOUBLE          shift and go to state 8
    CHAR            shift and go to state 9
    STRING          shift and go to state 10
    IDENTIFIER      shift and go to state 28

    exp                            shift and go to state 37

state 19

    (13) exp -> exp GE . exp
    (6) exp -> . exp PLUS exp
    (7) exp -> . exp MINUS exp
    (8) exp -> . exp MULTIPLY exp
    (9) exp -> . exp DIVIDE exp
    (10) exp -> . exp MODULO exp
    (11) exp -> . exp POWER exp
    (12) exp -> . exp LE exp
    (13) exp -> . exp GE exp
    (14) exp -> . exp ISEQUAL exp
    (15) exp -> . exp NOTEQUAL exp
    (16) exp -> . exp LT exp
    (17) exp -> . exp GT exp
    (18) exp -> . exp AND exp
    (19) exp -> . exp OR exp
    (20) exp -> . LPARAN exp RPARAN
    (21) exp -> . NOT exp
    (22) exp -> . INT
    (23) exp -> . DOUBLE
    (24) exp -> . CHAR
    (25) exp -> . STRING
    (26) exp -> . IDENTIFIER

    LPARAN          shift and go to state 5
    NOT             shift and go to state 6
    INT             shift and go to state 7
    DOUBLE          shift and go to state 8
    CHAR            shift and go to state 9
    STRING          shift and go to state 10
    IDENTIFIER      shift and go to state 28

    exp                            shift and go to state 38

state 20

    (14) exp -> exp ISEQUAL . exp
    (6) exp -> . exp PLUS exp
    (7) exp -> . exp MINUS exp
    (8) exp -> . exp MULTIPLY exp
    (9) exp -> . exp DIVIDE exp
    (10) exp -> . exp MODULO exp
    (11) exp -> . exp POWER exp
    (12) exp -> . exp LE exp
    (13) exp -> . exp GE exp
    (14) exp -> . exp ISEQUAL exp
    (15) exp -> . exp NOTEQUAL exp
    (16) exp -> . exp LT exp
    (17) exp -> . exp GT exp
    (18) exp -> . exp AND exp
    (19) exp -> . exp OR exp
    (20) exp -> . LPARAN exp RPARAN
    (21) exp -> . NOT exp
    (22) exp -> . INT
    (23) exp -> . DOUBLE
    (24) exp -> . CHAR
    (25) exp -> . STRING
    (26) exp -> . IDENTIFIER

    LPARAN          shift and go to state 5
    NOT             shift and go to state 6
    INT             shift and go to state 7
    DOUBLE          shift and go to state 8
    CHAR            shift and go to state 9
    STRING          shift and go to state 10
    IDENTIFIER      shift and go to state 28

    exp                            shift and go to state 39

state 21

    (15) exp -> exp NOTEQUAL . exp
    (6) exp -> . exp PLUS exp
    (7) exp -> . exp MINUS exp
    (8) exp -> . exp MULTIPLY exp
    (9) exp -> . exp DIVIDE exp
    (10) exp -> . exp MODULO exp
    (11) exp -> . exp POWER exp
    (12) exp -> . exp LE exp
    (13) exp -> . exp GE exp
    (14) exp -> . exp ISEQUAL exp
    (15) exp -> . exp NOTEQUAL exp
    (16) exp -> . exp LT exp
    (17) exp -> . exp GT exp
    (18) exp -> . exp AND exp
    (19) exp -> . exp OR exp
    (20) exp -> . LPARAN exp RPARAN
    (21) exp -> . NOT exp
    (22) exp -> . INT
    (23) exp -> . DOUBLE
    (24) exp -> . CHAR
    (25) exp -> . STRING
    (26) exp -> . IDENTIFIER

    LPARAN          shift and go to state 5
    NOT             shift and go to state 6
    INT             shift and go to state 7
    DOUBLE          shift and go to state 8
    CHAR            shift and go to state 9
    STRING          shift and go to state 10
    IDENTIFIER      shift and go to state 28

    exp                            shift and go to state 40

state 22

    (16) exp -> exp LT . exp
    (6) exp -> . exp PLUS exp
    (7) exp -> . exp MINUS exp
    (8) exp -> . exp MULTIPLY exp
    (9) exp -> . exp DIVIDE exp
    (10) exp -> . exp MODULO exp
    (11) exp -> . exp POWER exp
    (12) exp -> . exp LE exp
    (13) exp -> . exp GE exp
    (14) exp -> . exp ISEQUAL exp
    (15) exp -> . exp NOTEQUAL exp
    (16) exp -> . exp LT exp
    (17) exp -> . exp GT exp
    (18) exp -> . exp AND exp
    (19) exp -> . exp OR exp
    (20) exp -> . LPARAN exp RPARAN
    (21) exp -> . NOT exp
    (22) exp -> . INT
    (23) exp -> . DOUBLE
    (24) exp -> . CHAR
    (25) exp -> . STRING
    (26) exp -> . IDENTIFIER

    LPARAN          shift and go to state 5
    NOT             shift and go to state 6
    INT             shift and go to state 7
    DOUBLE          shift and go to state 8
    CHAR            shift and go to state 9
    STRING          shift and go to state 10
    IDENTIFIER      shift and go to state 28

    exp                            shift and go to state 41

state 23

    (17) exp -> exp GT . exp
    (6) exp -> . exp PLUS exp
    (7) exp -> . exp MINUS exp
    (8) exp -> . exp MULTIPLY exp
    (9) exp -> . exp DIVIDE exp
    (10) exp -> . exp MODULO exp
    (11) exp -> . exp POWER exp
    (12) exp -> . exp LE exp
    (13) exp -> . exp GE exp
    (14) exp -> . exp ISEQUAL exp
    (15) exp -> . exp NOTEQUAL exp
    (16) exp -> . exp LT exp
    (17) exp -> . exp GT exp
    (18) exp -> . exp AND exp
    (19) exp -> . exp OR exp
    (20) exp -> . LPARAN exp RPARAN
    (21) exp -> . NOT exp
    (22) exp -> . INT
    (23) exp -> . DOUBLE
    (24) exp -> . CHAR
    (25) exp -> . STRING
    (26) exp -> . IDENTIFIER

    LPARAN          shift and go to state 5
    NOT             shift and go to state 6
    INT             shift and go to state 7
    DOUBLE          shift and go to state 8
    CHAR            shift and go to state 9
    STRING          shift and go to state 10
    IDENTIFIER      shift and go to state 28

    exp                            shift and go to state 42

state 24

    (18) exp -> exp AND . exp
    (6) exp -> . exp PLUS exp
    (7) exp -> . exp MINUS exp
    (8) exp -> . exp MULTIPLY exp
    (9) exp -> . exp DIVIDE exp
    (10) exp -> . exp MODULO exp
    (11) exp -> . exp POWER exp
    (12) exp -> . exp LE exp
    (13) exp -> . exp GE exp
    (14) exp -> . exp ISEQUAL exp
    (15) exp -> . exp NOTEQUAL exp
    (16) exp -> . exp LT exp
    (17) exp -> . exp GT exp
    (18) exp -> . exp AND exp
    (19) exp -> . exp OR exp
    (20) exp -> . LPARAN exp RPARAN
    (21) exp -> . NOT exp
    (22) exp -> . INT
    (23) exp -> . DOUBLE
    (24) exp -> . CHAR
    (25) exp -> . STRING
    (26) exp -> . IDENTIFIER

    LPARAN          shift and go to state 5
    NOT             shift and go to state 6
    INT             shift and go to state 7
    DOUBLE          shift and go to state 8
    CHAR            shift and go to state 9
    STRING          shift and go to state 10
    IDENTIFIER      shift and go to state 28

    exp                            shift and go to state 43

state 25

    (19) exp -> exp OR . exp
    (6) exp -> . exp PLUS exp
    (7) exp -> . exp MINUS exp
    (8) exp -> . exp MULTIPLY exp
    (9) exp -> . exp DIVIDE exp
    (10) exp -> . exp MODULO exp
    (11) exp -> . exp POWER exp
    (12) exp -> . exp LE exp
    (13) exp -> . exp GE exp
    (14) exp -> . exp ISEQUAL exp
    (15) exp -> . exp NOTEQUAL exp
    (16) exp -> . exp LT exp
    (17) exp -> . exp GT exp
    (18) exp -> . exp AND exp
    (19) exp -> . exp OR exp
    (20) exp -> . LPARAN exp RPARAN
    (21) exp -> . NOT exp
    (22) exp -> . INT
    (23) exp -> . DOUBLE
    (24) exp -> . CHAR
    (25) exp -> . STRING
    (26) exp -> . IDENTIFIER

    LPARAN          shift and go to state 5
    NOT             shift and go to state 6
    INT             shift and go to state 7
    DOUBLE          shift and go to state 8
    CHAR            shift and go to state 9
    STRING          shift and go to state 10
    IDENTIFIER      shift and go to state 28

    exp                            shift and go to state 44

state 26

    (2) stmt -> PRINT LPARAN . exps RPARAN
    (3) exps -> . exp
    (4) exps -> . exp COMMA exps
    (6) exp -> . exp PLUS exp
    (7) exp -> . exp MINUS exp
    (8) exp -> . exp MULTIPLY exp
    (9) exp -> . exp DIVIDE exp
    (10) exp -> . exp MODULO exp
    (11) exp -> . exp POWER exp
    (12) exp -> . exp LE exp
    (13) exp -> . exp GE exp
    (14) exp -> . exp ISEQUAL exp
    (15) exp -> . exp NOTEQUAL exp
    (16) exp -> . exp LT exp
    (17) exp -> . exp GT exp
    (18) exp -> . exp AND exp
    (19) exp -> . exp OR exp
    (20) exp -> . LPARAN exp RPARAN
    (21) exp -> . NOT exp
    (22) exp -> . INT
    (23) exp -> . DOUBLE
    (24) exp -> . CHAR
    (25) exp -> . STRING
    (26) exp -> . IDENTIFIER

    LPARAN          shift and go to state 5
    NOT             shift and go to state 6
    INT             shift and go to state 7
    DOUBLE          shift and go to state 8
    CHAR            shift and go to state 9
    STRING          shift and go to state 10
    IDENTIFIER      shift and go to state 28

    exps                           shift and go to state 45
    exp                            shift and go to state 46

state 27

    (20) exp -> LPARAN exp . RPARAN
    (6) exp -> exp . PLUS exp
    (7) exp -> exp . MINUS exp
    (8) exp -> exp . MULTIPLY exp
    (9) exp -> exp . DIVIDE exp
    (10) exp -> exp . MODULO exp
    (11) exp -> exp . POWER exp
    (12) exp -> exp . LE exp
    (13) exp -> exp . GE exp
    (14) exp -> exp . ISEQUAL exp
    (15) exp -> exp . NOTEQUAL exp
    (16) exp -> exp . LT exp
    (17) exp -> exp . GT exp
    (18) exp -> exp . AND exp
    (19) exp -> exp . OR exp

    RPARAN          shift and go to state 47
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13
    MULTIPLY        shift and go to state 14
    DIVIDE          shift and go to state 15
    MODULO          shift and go to state 16
    POWER           shift and go to state 17
    LE              shift and go to state 18
    GE              shift and go to state 19
    ISEQUAL         shift and go to state 20
    NOTEQUAL        shift and go to state 21
    LT              shift and go to state 22
    GT              shift and go to state 23
    AND             shift and go to state 24
    OR              shift and go to state 25


state 28

    (26) exp -> IDENTIFIER .

    RPARAN          reduce using rule 26 (exp -> IDENTIFIER .)
    PLUS            reduce using rule 26 (exp -> IDENTIFIER .)
    MINUS           reduce using rule 26 (exp -> IDENTIFIER .)
    MULTIPLY        reduce using rule 26 (exp -> IDENTIFIER .)
    DIVIDE          reduce using rule 26 (exp -> IDENTIFIER .)
    MODULO          reduce using rule 26 (exp -> IDENTIFIER .)
    POWER           reduce using rule 26 (exp -> IDENTIFIER .)
    LE              reduce using rule 26 (exp -> IDENTIFIER .)
    GE              reduce using rule 26 (exp -> IDENTIFIER .)
    ISEQUAL         reduce using rule 26 (exp -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 26 (exp -> IDENTIFIER .)
    LT              reduce using rule 26 (exp -> IDENTIFIER .)
    GT              reduce using rule 26 (exp -> IDENTIFIER .)
    AND             reduce using rule 26 (exp -> IDENTIFIER .)
    OR              reduce using rule 26 (exp -> IDENTIFIER .)
    $end            reduce using rule 26 (exp -> IDENTIFIER .)
    COMMA           reduce using rule 26 (exp -> IDENTIFIER .)


state 29

    (21) exp -> NOT exp .
    (6) exp -> exp . PLUS exp
    (7) exp -> exp . MINUS exp
    (8) exp -> exp . MULTIPLY exp
    (9) exp -> exp . DIVIDE exp
    (10) exp -> exp . MODULO exp
    (11) exp -> exp . POWER exp
    (12) exp -> exp . LE exp
    (13) exp -> exp . GE exp
    (14) exp -> exp . ISEQUAL exp
    (15) exp -> exp . NOTEQUAL exp
    (16) exp -> exp . LT exp
    (17) exp -> exp . GT exp
    (18) exp -> exp . AND exp
    (19) exp -> exp . OR exp

    PLUS            reduce using rule 21 (exp -> NOT exp .)
    MINUS           reduce using rule 21 (exp -> NOT exp .)
    MULTIPLY        reduce using rule 21 (exp -> NOT exp .)
    DIVIDE          reduce using rule 21 (exp -> NOT exp .)
    MODULO          reduce using rule 21 (exp -> NOT exp .)
    POWER           reduce using rule 21 (exp -> NOT exp .)
    LE              reduce using rule 21 (exp -> NOT exp .)
    GE              reduce using rule 21 (exp -> NOT exp .)
    ISEQUAL         reduce using rule 21 (exp -> NOT exp .)
    NOTEQUAL        reduce using rule 21 (exp -> NOT exp .)
    LT              reduce using rule 21 (exp -> NOT exp .)
    GT              reduce using rule 21 (exp -> NOT exp .)
    AND             reduce using rule 21 (exp -> NOT exp .)
    OR              reduce using rule 21 (exp -> NOT exp .)
    $end            reduce using rule 21 (exp -> NOT exp .)
    RPARAN          reduce using rule 21 (exp -> NOT exp .)
    COMMA           reduce using rule 21 (exp -> NOT exp .)

  ! PLUS            [ shift and go to state 12 ]
  ! MINUS           [ shift and go to state 13 ]
  ! MULTIPLY        [ shift and go to state 14 ]
  ! DIVIDE          [ shift and go to state 15 ]
  ! MODULO          [ shift and go to state 16 ]
  ! POWER           [ shift and go to state 17 ]
  ! LE              [ shift and go to state 18 ]
  ! GE              [ shift and go to state 19 ]
  ! ISEQUAL         [ shift and go to state 20 ]
  ! NOTEQUAL        [ shift and go to state 21 ]
  ! LT              [ shift and go to state 22 ]
  ! GT              [ shift and go to state 23 ]
  ! AND             [ shift and go to state 24 ]
  ! OR              [ shift and go to state 25 ]


state 30

    (1) stmt -> IDENTIFIER EQUAL exp .
    (6) exp -> exp . PLUS exp
    (7) exp -> exp . MINUS exp
    (8) exp -> exp . MULTIPLY exp
    (9) exp -> exp . DIVIDE exp
    (10) exp -> exp . MODULO exp
    (11) exp -> exp . POWER exp
    (12) exp -> exp . LE exp
    (13) exp -> exp . GE exp
    (14) exp -> exp . ISEQUAL exp
    (15) exp -> exp . NOTEQUAL exp
    (16) exp -> exp . LT exp
    (17) exp -> exp . GT exp
    (18) exp -> exp . AND exp
    (19) exp -> exp . OR exp

    $end            reduce using rule 1 (stmt -> IDENTIFIER EQUAL exp .)
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13
    MULTIPLY        shift and go to state 14
    DIVIDE          shift and go to state 15
    MODULO          shift and go to state 16
    POWER           shift and go to state 17
    LE              shift and go to state 18
    GE              shift and go to state 19
    ISEQUAL         shift and go to state 20
    NOTEQUAL        shift and go to state 21
    LT              shift and go to state 22
    GT              shift and go to state 23
    AND             shift and go to state 24
    OR              shift and go to state 25


state 31

    (6) exp -> exp PLUS exp .
    (6) exp -> exp . PLUS exp
    (7) exp -> exp . MINUS exp
    (8) exp -> exp . MULTIPLY exp
    (9) exp -> exp . DIVIDE exp
    (10) exp -> exp . MODULO exp
    (11) exp -> exp . POWER exp
    (12) exp -> exp . LE exp
    (13) exp -> exp . GE exp
    (14) exp -> exp . ISEQUAL exp
    (15) exp -> exp . NOTEQUAL exp
    (16) exp -> exp . LT exp
    (17) exp -> exp . GT exp
    (18) exp -> exp . AND exp
    (19) exp -> exp . OR exp

    PLUS            reduce using rule 6 (exp -> exp PLUS exp .)
    MINUS           reduce using rule 6 (exp -> exp PLUS exp .)
    MODULO          reduce using rule 6 (exp -> exp PLUS exp .)
    POWER           reduce using rule 6 (exp -> exp PLUS exp .)
    LE              reduce using rule 6 (exp -> exp PLUS exp .)
    GE              reduce using rule 6 (exp -> exp PLUS exp .)
    ISEQUAL         reduce using rule 6 (exp -> exp PLUS exp .)
    NOTEQUAL        reduce using rule 6 (exp -> exp PLUS exp .)
    LT              reduce using rule 6 (exp -> exp PLUS exp .)
    GT              reduce using rule 6 (exp -> exp PLUS exp .)
    AND             reduce using rule 6 (exp -> exp PLUS exp .)
    OR              reduce using rule 6 (exp -> exp PLUS exp .)
    $end            reduce using rule 6 (exp -> exp PLUS exp .)
    RPARAN          reduce using rule 6 (exp -> exp PLUS exp .)
    COMMA           reduce using rule 6 (exp -> exp PLUS exp .)
    MULTIPLY        shift and go to state 14
    DIVIDE          shift and go to state 15

  ! MULTIPLY        [ reduce using rule 6 (exp -> exp PLUS exp .) ]
  ! DIVIDE          [ reduce using rule 6 (exp -> exp PLUS exp .) ]
  ! PLUS            [ shift and go to state 12 ]
  ! MINUS           [ shift and go to state 13 ]
  ! MODULO          [ shift and go to state 16 ]
  ! POWER           [ shift and go to state 17 ]
  ! LE              [ shift and go to state 18 ]
  ! GE              [ shift and go to state 19 ]
  ! ISEQUAL         [ shift and go to state 20 ]
  ! NOTEQUAL        [ shift and go to state 21 ]
  ! LT              [ shift and go to state 22 ]
  ! GT              [ shift and go to state 23 ]
  ! AND             [ shift and go to state 24 ]
  ! OR              [ shift and go to state 25 ]


state 32

    (7) exp -> exp MINUS exp .
    (6) exp -> exp . PLUS exp
    (7) exp -> exp . MINUS exp
    (8) exp -> exp . MULTIPLY exp
    (9) exp -> exp . DIVIDE exp
    (10) exp -> exp . MODULO exp
    (11) exp -> exp . POWER exp
    (12) exp -> exp . LE exp
    (13) exp -> exp . GE exp
    (14) exp -> exp . ISEQUAL exp
    (15) exp -> exp . NOTEQUAL exp
    (16) exp -> exp . LT exp
    (17) exp -> exp . GT exp
    (18) exp -> exp . AND exp
    (19) exp -> exp . OR exp

    PLUS            reduce using rule 7 (exp -> exp MINUS exp .)
    MINUS           reduce using rule 7 (exp -> exp MINUS exp .)
    MODULO          reduce using rule 7 (exp -> exp MINUS exp .)
    POWER           reduce using rule 7 (exp -> exp MINUS exp .)
    LE              reduce using rule 7 (exp -> exp MINUS exp .)
    GE              reduce using rule 7 (exp -> exp MINUS exp .)
    ISEQUAL         reduce using rule 7 (exp -> exp MINUS exp .)
    NOTEQUAL        reduce using rule 7 (exp -> exp MINUS exp .)
    LT              reduce using rule 7 (exp -> exp MINUS exp .)
    GT              reduce using rule 7 (exp -> exp MINUS exp .)
    AND             reduce using rule 7 (exp -> exp MINUS exp .)
    OR              reduce using rule 7 (exp -> exp MINUS exp .)
    $end            reduce using rule 7 (exp -> exp MINUS exp .)
    RPARAN          reduce using rule 7 (exp -> exp MINUS exp .)
    COMMA           reduce using rule 7 (exp -> exp MINUS exp .)
    MULTIPLY        shift and go to state 14
    DIVIDE          shift and go to state 15

  ! MULTIPLY        [ reduce using rule 7 (exp -> exp MINUS exp .) ]
  ! DIVIDE          [ reduce using rule 7 (exp -> exp MINUS exp .) ]
  ! PLUS            [ shift and go to state 12 ]
  ! MINUS           [ shift and go to state 13 ]
  ! MODULO          [ shift and go to state 16 ]
  ! POWER           [ shift and go to state 17 ]
  ! LE              [ shift and go to state 18 ]
  ! GE              [ shift and go to state 19 ]
  ! ISEQUAL         [ shift and go to state 20 ]
  ! NOTEQUAL        [ shift and go to state 21 ]
  ! LT              [ shift and go to state 22 ]
  ! GT              [ shift and go to state 23 ]
  ! AND             [ shift and go to state 24 ]
  ! OR              [ shift and go to state 25 ]


state 33

    (8) exp -> exp MULTIPLY exp .
    (6) exp -> exp . PLUS exp
    (7) exp -> exp . MINUS exp
    (8) exp -> exp . MULTIPLY exp
    (9) exp -> exp . DIVIDE exp
    (10) exp -> exp . MODULO exp
    (11) exp -> exp . POWER exp
    (12) exp -> exp . LE exp
    (13) exp -> exp . GE exp
    (14) exp -> exp . ISEQUAL exp
    (15) exp -> exp . NOTEQUAL exp
    (16) exp -> exp . LT exp
    (17) exp -> exp . GT exp
    (18) exp -> exp . AND exp
    (19) exp -> exp . OR exp

    PLUS            reduce using rule 8 (exp -> exp MULTIPLY exp .)
    MINUS           reduce using rule 8 (exp -> exp MULTIPLY exp .)
    MULTIPLY        reduce using rule 8 (exp -> exp MULTIPLY exp .)
    DIVIDE          reduce using rule 8 (exp -> exp MULTIPLY exp .)
    MODULO          reduce using rule 8 (exp -> exp MULTIPLY exp .)
    POWER           reduce using rule 8 (exp -> exp MULTIPLY exp .)
    LE              reduce using rule 8 (exp -> exp MULTIPLY exp .)
    GE              reduce using rule 8 (exp -> exp MULTIPLY exp .)
    ISEQUAL         reduce using rule 8 (exp -> exp MULTIPLY exp .)
    NOTEQUAL        reduce using rule 8 (exp -> exp MULTIPLY exp .)
    LT              reduce using rule 8 (exp -> exp MULTIPLY exp .)
    GT              reduce using rule 8 (exp -> exp MULTIPLY exp .)
    AND             reduce using rule 8 (exp -> exp MULTIPLY exp .)
    OR              reduce using rule 8 (exp -> exp MULTIPLY exp .)
    $end            reduce using rule 8 (exp -> exp MULTIPLY exp .)
    RPARAN          reduce using rule 8 (exp -> exp MULTIPLY exp .)
    COMMA           reduce using rule 8 (exp -> exp MULTIPLY exp .)

  ! PLUS            [ shift and go to state 12 ]
  ! MINUS           [ shift and go to state 13 ]
  ! MULTIPLY        [ shift and go to state 14 ]
  ! DIVIDE          [ shift and go to state 15 ]
  ! MODULO          [ shift and go to state 16 ]
  ! POWER           [ shift and go to state 17 ]
  ! LE              [ shift and go to state 18 ]
  ! GE              [ shift and go to state 19 ]
  ! ISEQUAL         [ shift and go to state 20 ]
  ! NOTEQUAL        [ shift and go to state 21 ]
  ! LT              [ shift and go to state 22 ]
  ! GT              [ shift and go to state 23 ]
  ! AND             [ shift and go to state 24 ]
  ! OR              [ shift and go to state 25 ]


state 34

    (9) exp -> exp DIVIDE exp .
    (6) exp -> exp . PLUS exp
    (7) exp -> exp . MINUS exp
    (8) exp -> exp . MULTIPLY exp
    (9) exp -> exp . DIVIDE exp
    (10) exp -> exp . MODULO exp
    (11) exp -> exp . POWER exp
    (12) exp -> exp . LE exp
    (13) exp -> exp . GE exp
    (14) exp -> exp . ISEQUAL exp
    (15) exp -> exp . NOTEQUAL exp
    (16) exp -> exp . LT exp
    (17) exp -> exp . GT exp
    (18) exp -> exp . AND exp
    (19) exp -> exp . OR exp

    PLUS            reduce using rule 9 (exp -> exp DIVIDE exp .)
    MINUS           reduce using rule 9 (exp -> exp DIVIDE exp .)
    MULTIPLY        reduce using rule 9 (exp -> exp DIVIDE exp .)
    DIVIDE          reduce using rule 9 (exp -> exp DIVIDE exp .)
    MODULO          reduce using rule 9 (exp -> exp DIVIDE exp .)
    POWER           reduce using rule 9 (exp -> exp DIVIDE exp .)
    LE              reduce using rule 9 (exp -> exp DIVIDE exp .)
    GE              reduce using rule 9 (exp -> exp DIVIDE exp .)
    ISEQUAL         reduce using rule 9 (exp -> exp DIVIDE exp .)
    NOTEQUAL        reduce using rule 9 (exp -> exp DIVIDE exp .)
    LT              reduce using rule 9 (exp -> exp DIVIDE exp .)
    GT              reduce using rule 9 (exp -> exp DIVIDE exp .)
    AND             reduce using rule 9 (exp -> exp DIVIDE exp .)
    OR              reduce using rule 9 (exp -> exp DIVIDE exp .)
    $end            reduce using rule 9 (exp -> exp DIVIDE exp .)
    RPARAN          reduce using rule 9 (exp -> exp DIVIDE exp .)
    COMMA           reduce using rule 9 (exp -> exp DIVIDE exp .)

  ! PLUS            [ shift and go to state 12 ]
  ! MINUS           [ shift and go to state 13 ]
  ! MULTIPLY        [ shift and go to state 14 ]
  ! DIVIDE          [ shift and go to state 15 ]
  ! MODULO          [ shift and go to state 16 ]
  ! POWER           [ shift and go to state 17 ]
  ! LE              [ shift and go to state 18 ]
  ! GE              [ shift and go to state 19 ]
  ! ISEQUAL         [ shift and go to state 20 ]
  ! NOTEQUAL        [ shift and go to state 21 ]
  ! LT              [ shift and go to state 22 ]
  ! GT              [ shift and go to state 23 ]
  ! AND             [ shift and go to state 24 ]
  ! OR              [ shift and go to state 25 ]


state 35

    (10) exp -> exp MODULO exp .
    (6) exp -> exp . PLUS exp
    (7) exp -> exp . MINUS exp
    (8) exp -> exp . MULTIPLY exp
    (9) exp -> exp . DIVIDE exp
    (10) exp -> exp . MODULO exp
    (11) exp -> exp . POWER exp
    (12) exp -> exp . LE exp
    (13) exp -> exp . GE exp
    (14) exp -> exp . ISEQUAL exp
    (15) exp -> exp . NOTEQUAL exp
    (16) exp -> exp . LT exp
    (17) exp -> exp . GT exp
    (18) exp -> exp . AND exp
    (19) exp -> exp . OR exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for ISEQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    $end            reduce using rule 10 (exp -> exp MODULO exp .)
    RPARAN          reduce using rule 10 (exp -> exp MODULO exp .)
    COMMA           reduce using rule 10 (exp -> exp MODULO exp .)
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13
    MULTIPLY        shift and go to state 14
    DIVIDE          shift and go to state 15
    MODULO          shift and go to state 16
    POWER           shift and go to state 17
    LE              shift and go to state 18
    GE              shift and go to state 19
    ISEQUAL         shift and go to state 20
    NOTEQUAL        shift and go to state 21
    LT              shift and go to state 22
    GT              shift and go to state 23
    AND             shift and go to state 24
    OR              shift and go to state 25

  ! PLUS            [ reduce using rule 10 (exp -> exp MODULO exp .) ]
  ! MINUS           [ reduce using rule 10 (exp -> exp MODULO exp .) ]
  ! MULTIPLY        [ reduce using rule 10 (exp -> exp MODULO exp .) ]
  ! DIVIDE          [ reduce using rule 10 (exp -> exp MODULO exp .) ]
  ! MODULO          [ reduce using rule 10 (exp -> exp MODULO exp .) ]
  ! POWER           [ reduce using rule 10 (exp -> exp MODULO exp .) ]
  ! LE              [ reduce using rule 10 (exp -> exp MODULO exp .) ]
  ! GE              [ reduce using rule 10 (exp -> exp MODULO exp .) ]
  ! ISEQUAL         [ reduce using rule 10 (exp -> exp MODULO exp .) ]
  ! NOTEQUAL        [ reduce using rule 10 (exp -> exp MODULO exp .) ]
  ! LT              [ reduce using rule 10 (exp -> exp MODULO exp .) ]
  ! GT              [ reduce using rule 10 (exp -> exp MODULO exp .) ]
  ! AND             [ reduce using rule 10 (exp -> exp MODULO exp .) ]
  ! OR              [ reduce using rule 10 (exp -> exp MODULO exp .) ]


state 36

    (11) exp -> exp POWER exp .
    (6) exp -> exp . PLUS exp
    (7) exp -> exp . MINUS exp
    (8) exp -> exp . MULTIPLY exp
    (9) exp -> exp . DIVIDE exp
    (10) exp -> exp . MODULO exp
    (11) exp -> exp . POWER exp
    (12) exp -> exp . LE exp
    (13) exp -> exp . GE exp
    (14) exp -> exp . ISEQUAL exp
    (15) exp -> exp . NOTEQUAL exp
    (16) exp -> exp . LT exp
    (17) exp -> exp . GT exp
    (18) exp -> exp . AND exp
    (19) exp -> exp . OR exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for ISEQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    $end            reduce using rule 11 (exp -> exp POWER exp .)
    RPARAN          reduce using rule 11 (exp -> exp POWER exp .)
    COMMA           reduce using rule 11 (exp -> exp POWER exp .)
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13
    MULTIPLY        shift and go to state 14
    DIVIDE          shift and go to state 15
    MODULO          shift and go to state 16
    POWER           shift and go to state 17
    LE              shift and go to state 18
    GE              shift and go to state 19
    ISEQUAL         shift and go to state 20
    NOTEQUAL        shift and go to state 21
    LT              shift and go to state 22
    GT              shift and go to state 23
    AND             shift and go to state 24
    OR              shift and go to state 25

  ! PLUS            [ reduce using rule 11 (exp -> exp POWER exp .) ]
  ! MINUS           [ reduce using rule 11 (exp -> exp POWER exp .) ]
  ! MULTIPLY        [ reduce using rule 11 (exp -> exp POWER exp .) ]
  ! DIVIDE          [ reduce using rule 11 (exp -> exp POWER exp .) ]
  ! MODULO          [ reduce using rule 11 (exp -> exp POWER exp .) ]
  ! POWER           [ reduce using rule 11 (exp -> exp POWER exp .) ]
  ! LE              [ reduce using rule 11 (exp -> exp POWER exp .) ]
  ! GE              [ reduce using rule 11 (exp -> exp POWER exp .) ]
  ! ISEQUAL         [ reduce using rule 11 (exp -> exp POWER exp .) ]
  ! NOTEQUAL        [ reduce using rule 11 (exp -> exp POWER exp .) ]
  ! LT              [ reduce using rule 11 (exp -> exp POWER exp .) ]
  ! GT              [ reduce using rule 11 (exp -> exp POWER exp .) ]
  ! AND             [ reduce using rule 11 (exp -> exp POWER exp .) ]
  ! OR              [ reduce using rule 11 (exp -> exp POWER exp .) ]


state 37

    (12) exp -> exp LE exp .
    (6) exp -> exp . PLUS exp
    (7) exp -> exp . MINUS exp
    (8) exp -> exp . MULTIPLY exp
    (9) exp -> exp . DIVIDE exp
    (10) exp -> exp . MODULO exp
    (11) exp -> exp . POWER exp
    (12) exp -> exp . LE exp
    (13) exp -> exp . GE exp
    (14) exp -> exp . ISEQUAL exp
    (15) exp -> exp . NOTEQUAL exp
    (16) exp -> exp . LT exp
    (17) exp -> exp . GT exp
    (18) exp -> exp . AND exp
    (19) exp -> exp . OR exp

    MODULO          reduce using rule 12 (exp -> exp LE exp .)
    POWER           reduce using rule 12 (exp -> exp LE exp .)
    LE              reduce using rule 12 (exp -> exp LE exp .)
    GE              reduce using rule 12 (exp -> exp LE exp .)
    ISEQUAL         reduce using rule 12 (exp -> exp LE exp .)
    NOTEQUAL        reduce using rule 12 (exp -> exp LE exp .)
    LT              reduce using rule 12 (exp -> exp LE exp .)
    GT              reduce using rule 12 (exp -> exp LE exp .)
    AND             reduce using rule 12 (exp -> exp LE exp .)
    OR              reduce using rule 12 (exp -> exp LE exp .)
    $end            reduce using rule 12 (exp -> exp LE exp .)
    RPARAN          reduce using rule 12 (exp -> exp LE exp .)
    COMMA           reduce using rule 12 (exp -> exp LE exp .)
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13
    MULTIPLY        shift and go to state 14
    DIVIDE          shift and go to state 15

  ! PLUS            [ reduce using rule 12 (exp -> exp LE exp .) ]
  ! MINUS           [ reduce using rule 12 (exp -> exp LE exp .) ]
  ! MULTIPLY        [ reduce using rule 12 (exp -> exp LE exp .) ]
  ! DIVIDE          [ reduce using rule 12 (exp -> exp LE exp .) ]
  ! MODULO          [ shift and go to state 16 ]
  ! POWER           [ shift and go to state 17 ]
  ! LE              [ shift and go to state 18 ]
  ! GE              [ shift and go to state 19 ]
  ! ISEQUAL         [ shift and go to state 20 ]
  ! NOTEQUAL        [ shift and go to state 21 ]
  ! LT              [ shift and go to state 22 ]
  ! GT              [ shift and go to state 23 ]
  ! AND             [ shift and go to state 24 ]
  ! OR              [ shift and go to state 25 ]


state 38

    (13) exp -> exp GE exp .
    (6) exp -> exp . PLUS exp
    (7) exp -> exp . MINUS exp
    (8) exp -> exp . MULTIPLY exp
    (9) exp -> exp . DIVIDE exp
    (10) exp -> exp . MODULO exp
    (11) exp -> exp . POWER exp
    (12) exp -> exp . LE exp
    (13) exp -> exp . GE exp
    (14) exp -> exp . ISEQUAL exp
    (15) exp -> exp . NOTEQUAL exp
    (16) exp -> exp . LT exp
    (17) exp -> exp . GT exp
    (18) exp -> exp . AND exp
    (19) exp -> exp . OR exp

    MODULO          reduce using rule 13 (exp -> exp GE exp .)
    POWER           reduce using rule 13 (exp -> exp GE exp .)
    LE              reduce using rule 13 (exp -> exp GE exp .)
    GE              reduce using rule 13 (exp -> exp GE exp .)
    ISEQUAL         reduce using rule 13 (exp -> exp GE exp .)
    NOTEQUAL        reduce using rule 13 (exp -> exp GE exp .)
    LT              reduce using rule 13 (exp -> exp GE exp .)
    GT              reduce using rule 13 (exp -> exp GE exp .)
    AND             reduce using rule 13 (exp -> exp GE exp .)
    OR              reduce using rule 13 (exp -> exp GE exp .)
    $end            reduce using rule 13 (exp -> exp GE exp .)
    RPARAN          reduce using rule 13 (exp -> exp GE exp .)
    COMMA           reduce using rule 13 (exp -> exp GE exp .)
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13
    MULTIPLY        shift and go to state 14
    DIVIDE          shift and go to state 15

  ! PLUS            [ reduce using rule 13 (exp -> exp GE exp .) ]
  ! MINUS           [ reduce using rule 13 (exp -> exp GE exp .) ]
  ! MULTIPLY        [ reduce using rule 13 (exp -> exp GE exp .) ]
  ! DIVIDE          [ reduce using rule 13 (exp -> exp GE exp .) ]
  ! MODULO          [ shift and go to state 16 ]
  ! POWER           [ shift and go to state 17 ]
  ! LE              [ shift and go to state 18 ]
  ! GE              [ shift and go to state 19 ]
  ! ISEQUAL         [ shift and go to state 20 ]
  ! NOTEQUAL        [ shift and go to state 21 ]
  ! LT              [ shift and go to state 22 ]
  ! GT              [ shift and go to state 23 ]
  ! AND             [ shift and go to state 24 ]
  ! OR              [ shift and go to state 25 ]


state 39

    (14) exp -> exp ISEQUAL exp .
    (6) exp -> exp . PLUS exp
    (7) exp -> exp . MINUS exp
    (8) exp -> exp . MULTIPLY exp
    (9) exp -> exp . DIVIDE exp
    (10) exp -> exp . MODULO exp
    (11) exp -> exp . POWER exp
    (12) exp -> exp . LE exp
    (13) exp -> exp . GE exp
    (14) exp -> exp . ISEQUAL exp
    (15) exp -> exp . NOTEQUAL exp
    (16) exp -> exp . LT exp
    (17) exp -> exp . GT exp
    (18) exp -> exp . AND exp
    (19) exp -> exp . OR exp

    MODULO          reduce using rule 14 (exp -> exp ISEQUAL exp .)
    POWER           reduce using rule 14 (exp -> exp ISEQUAL exp .)
    ISEQUAL         reduce using rule 14 (exp -> exp ISEQUAL exp .)
    NOTEQUAL        reduce using rule 14 (exp -> exp ISEQUAL exp .)
    AND             reduce using rule 14 (exp -> exp ISEQUAL exp .)
    OR              reduce using rule 14 (exp -> exp ISEQUAL exp .)
    $end            reduce using rule 14 (exp -> exp ISEQUAL exp .)
    RPARAN          reduce using rule 14 (exp -> exp ISEQUAL exp .)
    COMMA           reduce using rule 14 (exp -> exp ISEQUAL exp .)
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13
    MULTIPLY        shift and go to state 14
    DIVIDE          shift and go to state 15
    LE              shift and go to state 18
    GE              shift and go to state 19
    LT              shift and go to state 22
    GT              shift and go to state 23

  ! PLUS            [ reduce using rule 14 (exp -> exp ISEQUAL exp .) ]
  ! MINUS           [ reduce using rule 14 (exp -> exp ISEQUAL exp .) ]
  ! MULTIPLY        [ reduce using rule 14 (exp -> exp ISEQUAL exp .) ]
  ! DIVIDE          [ reduce using rule 14 (exp -> exp ISEQUAL exp .) ]
  ! LE              [ reduce using rule 14 (exp -> exp ISEQUAL exp .) ]
  ! GE              [ reduce using rule 14 (exp -> exp ISEQUAL exp .) ]
  ! LT              [ reduce using rule 14 (exp -> exp ISEQUAL exp .) ]
  ! GT              [ reduce using rule 14 (exp -> exp ISEQUAL exp .) ]
  ! MODULO          [ shift and go to state 16 ]
  ! POWER           [ shift and go to state 17 ]
  ! ISEQUAL         [ shift and go to state 20 ]
  ! NOTEQUAL        [ shift and go to state 21 ]
  ! AND             [ shift and go to state 24 ]
  ! OR              [ shift and go to state 25 ]


state 40

    (15) exp -> exp NOTEQUAL exp .
    (6) exp -> exp . PLUS exp
    (7) exp -> exp . MINUS exp
    (8) exp -> exp . MULTIPLY exp
    (9) exp -> exp . DIVIDE exp
    (10) exp -> exp . MODULO exp
    (11) exp -> exp . POWER exp
    (12) exp -> exp . LE exp
    (13) exp -> exp . GE exp
    (14) exp -> exp . ISEQUAL exp
    (15) exp -> exp . NOTEQUAL exp
    (16) exp -> exp . LT exp
    (17) exp -> exp . GT exp
    (18) exp -> exp . AND exp
    (19) exp -> exp . OR exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for ISEQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    $end            reduce using rule 15 (exp -> exp NOTEQUAL exp .)
    RPARAN          reduce using rule 15 (exp -> exp NOTEQUAL exp .)
    COMMA           reduce using rule 15 (exp -> exp NOTEQUAL exp .)
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13
    MULTIPLY        shift and go to state 14
    DIVIDE          shift and go to state 15
    MODULO          shift and go to state 16
    POWER           shift and go to state 17
    LE              shift and go to state 18
    GE              shift and go to state 19
    ISEQUAL         shift and go to state 20
    NOTEQUAL        shift and go to state 21
    LT              shift and go to state 22
    GT              shift and go to state 23
    AND             shift and go to state 24
    OR              shift and go to state 25

  ! PLUS            [ reduce using rule 15 (exp -> exp NOTEQUAL exp .) ]
  ! MINUS           [ reduce using rule 15 (exp -> exp NOTEQUAL exp .) ]
  ! MULTIPLY        [ reduce using rule 15 (exp -> exp NOTEQUAL exp .) ]
  ! DIVIDE          [ reduce using rule 15 (exp -> exp NOTEQUAL exp .) ]
  ! MODULO          [ reduce using rule 15 (exp -> exp NOTEQUAL exp .) ]
  ! POWER           [ reduce using rule 15 (exp -> exp NOTEQUAL exp .) ]
  ! LE              [ reduce using rule 15 (exp -> exp NOTEQUAL exp .) ]
  ! GE              [ reduce using rule 15 (exp -> exp NOTEQUAL exp .) ]
  ! ISEQUAL         [ reduce using rule 15 (exp -> exp NOTEQUAL exp .) ]
  ! NOTEQUAL        [ reduce using rule 15 (exp -> exp NOTEQUAL exp .) ]
  ! LT              [ reduce using rule 15 (exp -> exp NOTEQUAL exp .) ]
  ! GT              [ reduce using rule 15 (exp -> exp NOTEQUAL exp .) ]
  ! AND             [ reduce using rule 15 (exp -> exp NOTEQUAL exp .) ]
  ! OR              [ reduce using rule 15 (exp -> exp NOTEQUAL exp .) ]


state 41

    (16) exp -> exp LT exp .
    (6) exp -> exp . PLUS exp
    (7) exp -> exp . MINUS exp
    (8) exp -> exp . MULTIPLY exp
    (9) exp -> exp . DIVIDE exp
    (10) exp -> exp . MODULO exp
    (11) exp -> exp . POWER exp
    (12) exp -> exp . LE exp
    (13) exp -> exp . GE exp
    (14) exp -> exp . ISEQUAL exp
    (15) exp -> exp . NOTEQUAL exp
    (16) exp -> exp . LT exp
    (17) exp -> exp . GT exp
    (18) exp -> exp . AND exp
    (19) exp -> exp . OR exp

    MODULO          reduce using rule 16 (exp -> exp LT exp .)
    POWER           reduce using rule 16 (exp -> exp LT exp .)
    LE              reduce using rule 16 (exp -> exp LT exp .)
    GE              reduce using rule 16 (exp -> exp LT exp .)
    ISEQUAL         reduce using rule 16 (exp -> exp LT exp .)
    NOTEQUAL        reduce using rule 16 (exp -> exp LT exp .)
    LT              reduce using rule 16 (exp -> exp LT exp .)
    GT              reduce using rule 16 (exp -> exp LT exp .)
    AND             reduce using rule 16 (exp -> exp LT exp .)
    OR              reduce using rule 16 (exp -> exp LT exp .)
    $end            reduce using rule 16 (exp -> exp LT exp .)
    RPARAN          reduce using rule 16 (exp -> exp LT exp .)
    COMMA           reduce using rule 16 (exp -> exp LT exp .)
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13
    MULTIPLY        shift and go to state 14
    DIVIDE          shift and go to state 15

  ! PLUS            [ reduce using rule 16 (exp -> exp LT exp .) ]
  ! MINUS           [ reduce using rule 16 (exp -> exp LT exp .) ]
  ! MULTIPLY        [ reduce using rule 16 (exp -> exp LT exp .) ]
  ! DIVIDE          [ reduce using rule 16 (exp -> exp LT exp .) ]
  ! MODULO          [ shift and go to state 16 ]
  ! POWER           [ shift and go to state 17 ]
  ! LE              [ shift and go to state 18 ]
  ! GE              [ shift and go to state 19 ]
  ! ISEQUAL         [ shift and go to state 20 ]
  ! NOTEQUAL        [ shift and go to state 21 ]
  ! LT              [ shift and go to state 22 ]
  ! GT              [ shift and go to state 23 ]
  ! AND             [ shift and go to state 24 ]
  ! OR              [ shift and go to state 25 ]


state 42

    (17) exp -> exp GT exp .
    (6) exp -> exp . PLUS exp
    (7) exp -> exp . MINUS exp
    (8) exp -> exp . MULTIPLY exp
    (9) exp -> exp . DIVIDE exp
    (10) exp -> exp . MODULO exp
    (11) exp -> exp . POWER exp
    (12) exp -> exp . LE exp
    (13) exp -> exp . GE exp
    (14) exp -> exp . ISEQUAL exp
    (15) exp -> exp . NOTEQUAL exp
    (16) exp -> exp . LT exp
    (17) exp -> exp . GT exp
    (18) exp -> exp . AND exp
    (19) exp -> exp . OR exp

    MODULO          reduce using rule 17 (exp -> exp GT exp .)
    POWER           reduce using rule 17 (exp -> exp GT exp .)
    LE              reduce using rule 17 (exp -> exp GT exp .)
    GE              reduce using rule 17 (exp -> exp GT exp .)
    ISEQUAL         reduce using rule 17 (exp -> exp GT exp .)
    NOTEQUAL        reduce using rule 17 (exp -> exp GT exp .)
    LT              reduce using rule 17 (exp -> exp GT exp .)
    GT              reduce using rule 17 (exp -> exp GT exp .)
    AND             reduce using rule 17 (exp -> exp GT exp .)
    OR              reduce using rule 17 (exp -> exp GT exp .)
    $end            reduce using rule 17 (exp -> exp GT exp .)
    RPARAN          reduce using rule 17 (exp -> exp GT exp .)
    COMMA           reduce using rule 17 (exp -> exp GT exp .)
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13
    MULTIPLY        shift and go to state 14
    DIVIDE          shift and go to state 15

  ! PLUS            [ reduce using rule 17 (exp -> exp GT exp .) ]
  ! MINUS           [ reduce using rule 17 (exp -> exp GT exp .) ]
  ! MULTIPLY        [ reduce using rule 17 (exp -> exp GT exp .) ]
  ! DIVIDE          [ reduce using rule 17 (exp -> exp GT exp .) ]
  ! MODULO          [ shift and go to state 16 ]
  ! POWER           [ shift and go to state 17 ]
  ! LE              [ shift and go to state 18 ]
  ! GE              [ shift and go to state 19 ]
  ! ISEQUAL         [ shift and go to state 20 ]
  ! NOTEQUAL        [ shift and go to state 21 ]
  ! LT              [ shift and go to state 22 ]
  ! GT              [ shift and go to state 23 ]
  ! AND             [ shift and go to state 24 ]
  ! OR              [ shift and go to state 25 ]


state 43

    (18) exp -> exp AND exp .
    (6) exp -> exp . PLUS exp
    (7) exp -> exp . MINUS exp
    (8) exp -> exp . MULTIPLY exp
    (9) exp -> exp . DIVIDE exp
    (10) exp -> exp . MODULO exp
    (11) exp -> exp . POWER exp
    (12) exp -> exp . LE exp
    (13) exp -> exp . GE exp
    (14) exp -> exp . ISEQUAL exp
    (15) exp -> exp . NOTEQUAL exp
    (16) exp -> exp . LT exp
    (17) exp -> exp . GT exp
    (18) exp -> exp . AND exp
    (19) exp -> exp . OR exp

    MODULO          reduce using rule 18 (exp -> exp AND exp .)
    POWER           reduce using rule 18 (exp -> exp AND exp .)
    NOTEQUAL        reduce using rule 18 (exp -> exp AND exp .)
    AND             reduce using rule 18 (exp -> exp AND exp .)
    OR              reduce using rule 18 (exp -> exp AND exp .)
    $end            reduce using rule 18 (exp -> exp AND exp .)
    RPARAN          reduce using rule 18 (exp -> exp AND exp .)
    COMMA           reduce using rule 18 (exp -> exp AND exp .)
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13
    MULTIPLY        shift and go to state 14
    DIVIDE          shift and go to state 15
    LE              shift and go to state 18
    GE              shift and go to state 19
    ISEQUAL         shift and go to state 20
    LT              shift and go to state 22
    GT              shift and go to state 23

  ! PLUS            [ reduce using rule 18 (exp -> exp AND exp .) ]
  ! MINUS           [ reduce using rule 18 (exp -> exp AND exp .) ]
  ! MULTIPLY        [ reduce using rule 18 (exp -> exp AND exp .) ]
  ! DIVIDE          [ reduce using rule 18 (exp -> exp AND exp .) ]
  ! LE              [ reduce using rule 18 (exp -> exp AND exp .) ]
  ! GE              [ reduce using rule 18 (exp -> exp AND exp .) ]
  ! ISEQUAL         [ reduce using rule 18 (exp -> exp AND exp .) ]
  ! LT              [ reduce using rule 18 (exp -> exp AND exp .) ]
  ! GT              [ reduce using rule 18 (exp -> exp AND exp .) ]
  ! MODULO          [ shift and go to state 16 ]
  ! POWER           [ shift and go to state 17 ]
  ! NOTEQUAL        [ shift and go to state 21 ]
  ! AND             [ shift and go to state 24 ]
  ! OR              [ shift and go to state 25 ]


state 44

    (19) exp -> exp OR exp .
    (6) exp -> exp . PLUS exp
    (7) exp -> exp . MINUS exp
    (8) exp -> exp . MULTIPLY exp
    (9) exp -> exp . DIVIDE exp
    (10) exp -> exp . MODULO exp
    (11) exp -> exp . POWER exp
    (12) exp -> exp . LE exp
    (13) exp -> exp . GE exp
    (14) exp -> exp . ISEQUAL exp
    (15) exp -> exp . NOTEQUAL exp
    (16) exp -> exp . LT exp
    (17) exp -> exp . GT exp
    (18) exp -> exp . AND exp
    (19) exp -> exp . OR exp

    MODULO          reduce using rule 19 (exp -> exp OR exp .)
    POWER           reduce using rule 19 (exp -> exp OR exp .)
    NOTEQUAL        reduce using rule 19 (exp -> exp OR exp .)
    OR              reduce using rule 19 (exp -> exp OR exp .)
    $end            reduce using rule 19 (exp -> exp OR exp .)
    RPARAN          reduce using rule 19 (exp -> exp OR exp .)
    COMMA           reduce using rule 19 (exp -> exp OR exp .)
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13
    MULTIPLY        shift and go to state 14
    DIVIDE          shift and go to state 15
    LE              shift and go to state 18
    GE              shift and go to state 19
    ISEQUAL         shift and go to state 20
    LT              shift and go to state 22
    GT              shift and go to state 23
    AND             shift and go to state 24

  ! PLUS            [ reduce using rule 19 (exp -> exp OR exp .) ]
  ! MINUS           [ reduce using rule 19 (exp -> exp OR exp .) ]
  ! MULTIPLY        [ reduce using rule 19 (exp -> exp OR exp .) ]
  ! DIVIDE          [ reduce using rule 19 (exp -> exp OR exp .) ]
  ! LE              [ reduce using rule 19 (exp -> exp OR exp .) ]
  ! GE              [ reduce using rule 19 (exp -> exp OR exp .) ]
  ! ISEQUAL         [ reduce using rule 19 (exp -> exp OR exp .) ]
  ! LT              [ reduce using rule 19 (exp -> exp OR exp .) ]
  ! GT              [ reduce using rule 19 (exp -> exp OR exp .) ]
  ! AND             [ reduce using rule 19 (exp -> exp OR exp .) ]
  ! MODULO          [ shift and go to state 16 ]
  ! POWER           [ shift and go to state 17 ]
  ! NOTEQUAL        [ shift and go to state 21 ]
  ! OR              [ shift and go to state 25 ]


state 45

    (2) stmt -> PRINT LPARAN exps . RPARAN

    RPARAN          shift and go to state 48


state 46

    (3) exps -> exp .
    (4) exps -> exp . COMMA exps
    (6) exp -> exp . PLUS exp
    (7) exp -> exp . MINUS exp
    (8) exp -> exp . MULTIPLY exp
    (9) exp -> exp . DIVIDE exp
    (10) exp -> exp . MODULO exp
    (11) exp -> exp . POWER exp
    (12) exp -> exp . LE exp
    (13) exp -> exp . GE exp
    (14) exp -> exp . ISEQUAL exp
    (15) exp -> exp . NOTEQUAL exp
    (16) exp -> exp . LT exp
    (17) exp -> exp . GT exp
    (18) exp -> exp . AND exp
    (19) exp -> exp . OR exp

    RPARAN          reduce using rule 3 (exps -> exp .)
    COMMA           shift and go to state 49
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13
    MULTIPLY        shift and go to state 14
    DIVIDE          shift and go to state 15
    MODULO          shift and go to state 16
    POWER           shift and go to state 17
    LE              shift and go to state 18
    GE              shift and go to state 19
    ISEQUAL         shift and go to state 20
    NOTEQUAL        shift and go to state 21
    LT              shift and go to state 22
    GT              shift and go to state 23
    AND             shift and go to state 24
    OR              shift and go to state 25


state 47

    (20) exp -> LPARAN exp RPARAN .

    PLUS            reduce using rule 20 (exp -> LPARAN exp RPARAN .)
    MINUS           reduce using rule 20 (exp -> LPARAN exp RPARAN .)
    MULTIPLY        reduce using rule 20 (exp -> LPARAN exp RPARAN .)
    DIVIDE          reduce using rule 20 (exp -> LPARAN exp RPARAN .)
    MODULO          reduce using rule 20 (exp -> LPARAN exp RPARAN .)
    POWER           reduce using rule 20 (exp -> LPARAN exp RPARAN .)
    LE              reduce using rule 20 (exp -> LPARAN exp RPARAN .)
    GE              reduce using rule 20 (exp -> LPARAN exp RPARAN .)
    ISEQUAL         reduce using rule 20 (exp -> LPARAN exp RPARAN .)
    NOTEQUAL        reduce using rule 20 (exp -> LPARAN exp RPARAN .)
    LT              reduce using rule 20 (exp -> LPARAN exp RPARAN .)
    GT              reduce using rule 20 (exp -> LPARAN exp RPARAN .)
    AND             reduce using rule 20 (exp -> LPARAN exp RPARAN .)
    OR              reduce using rule 20 (exp -> LPARAN exp RPARAN .)
    $end            reduce using rule 20 (exp -> LPARAN exp RPARAN .)
    RPARAN          reduce using rule 20 (exp -> LPARAN exp RPARAN .)
    COMMA           reduce using rule 20 (exp -> LPARAN exp RPARAN .)


state 48

    (2) stmt -> PRINT LPARAN exps RPARAN .

    $end            reduce using rule 2 (stmt -> PRINT LPARAN exps RPARAN .)


state 49

    (4) exps -> exp COMMA . exps
    (3) exps -> . exp
    (4) exps -> . exp COMMA exps
    (6) exp -> . exp PLUS exp
    (7) exp -> . exp MINUS exp
    (8) exp -> . exp MULTIPLY exp
    (9) exp -> . exp DIVIDE exp
    (10) exp -> . exp MODULO exp
    (11) exp -> . exp POWER exp
    (12) exp -> . exp LE exp
    (13) exp -> . exp GE exp
    (14) exp -> . exp ISEQUAL exp
    (15) exp -> . exp NOTEQUAL exp
    (16) exp -> . exp LT exp
    (17) exp -> . exp GT exp
    (18) exp -> . exp AND exp
    (19) exp -> . exp OR exp
    (20) exp -> . LPARAN exp RPARAN
    (21) exp -> . NOT exp
    (22) exp -> . INT
    (23) exp -> . DOUBLE
    (24) exp -> . CHAR
    (25) exp -> . STRING
    (26) exp -> . IDENTIFIER

    LPARAN          shift and go to state 5
    NOT             shift and go to state 6
    INT             shift and go to state 7
    DOUBLE          shift and go to state 8
    CHAR            shift and go to state 9
    STRING          shift and go to state 10
    IDENTIFIER      shift and go to state 28

    exp                            shift and go to state 46
    exps                           shift and go to state 50

state 50

    (4) exps -> exp COMMA exps .

    RPARAN          reduce using rule 4 (exps -> exp COMMA exps .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 35 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 35 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 35 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 35 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 35 resolved as shift
WARNING: shift/reduce conflict for POWER in state 35 resolved as shift
WARNING: shift/reduce conflict for LE in state 35 resolved as shift
WARNING: shift/reduce conflict for GE in state 35 resolved as shift
WARNING: shift/reduce conflict for ISEQUAL in state 35 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 35 resolved as shift
WARNING: shift/reduce conflict for LT in state 35 resolved as shift
WARNING: shift/reduce conflict for GT in state 35 resolved as shift
WARNING: shift/reduce conflict for AND in state 35 resolved as shift
WARNING: shift/reduce conflict for OR in state 35 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 36 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 36 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 36 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 36 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 36 resolved as shift
WARNING: shift/reduce conflict for POWER in state 36 resolved as shift
WARNING: shift/reduce conflict for LE in state 36 resolved as shift
WARNING: shift/reduce conflict for GE in state 36 resolved as shift
WARNING: shift/reduce conflict for ISEQUAL in state 36 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 36 resolved as shift
WARNING: shift/reduce conflict for LT in state 36 resolved as shift
WARNING: shift/reduce conflict for GT in state 36 resolved as shift
WARNING: shift/reduce conflict for AND in state 36 resolved as shift
WARNING: shift/reduce conflict for OR in state 36 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 40 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 40 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 40 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 40 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 40 resolved as shift
WARNING: shift/reduce conflict for POWER in state 40 resolved as shift
WARNING: shift/reduce conflict for LE in state 40 resolved as shift
WARNING: shift/reduce conflict for GE in state 40 resolved as shift
WARNING: shift/reduce conflict for ISEQUAL in state 40 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 40 resolved as shift
WARNING: shift/reduce conflict for LT in state 40 resolved as shift
WARNING: shift/reduce conflict for GT in state 40 resolved as shift
WARNING: shift/reduce conflict for AND in state 40 resolved as shift
WARNING: shift/reduce conflict for OR in state 40 resolved as shift
