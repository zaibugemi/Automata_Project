Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> line
Rule 1     line -> stmts
Rule 2     stmts -> stmt
Rule 3     stmts -> stmt SEMICOLON stmts
Rule 4     stmt -> exp
Rule 5     stmt -> VARTYPE IDENTIFIER EQUAL exp
Rule 6     stmt -> IDENTIFIER EQUAL exp
Rule 7     stmt -> PRINT LPARAN exps RPARAN
Rule 8     exps -> exp
Rule 9     exps -> exp COMMA exps
Rule 10    stmt -> IDENTIFIER INCREMENT
Rule 11    stmt -> IDENTIFIER DECREMENT
Rule 12    exp -> MINUS IDENTIFIER
Rule 13    exp -> exp PLUS exp
Rule 14    exp -> exp MINUS exp
Rule 15    exp -> exp MULTIPLY exp
Rule 16    exp -> exp DIVIDE exp
Rule 17    exp -> exp MODULO exp
Rule 18    exp -> exp POWER exp
Rule 19    exp -> exp LE exp
Rule 20    exp -> exp GE exp
Rule 21    exp -> exp ISEQUAL exp
Rule 22    exp -> exp NOTEQUAL exp
Rule 23    exp -> exp LT exp
Rule 24    exp -> exp GT exp
Rule 25    exp -> exp AND exp
Rule 26    exp -> exp OR exp
Rule 27    exp -> LPARAN exp RPARAN
Rule 28    exp -> NOT exp
Rule 29    exp -> INT
Rule 30    exp -> DOUBLE
Rule 31    exp -> CHAR
Rule 32    exp -> STRING
Rule 33    exp -> BOOL
Rule 34    exp -> IDENTIFIER

Terminals, with rules where they appear

AND                  : 25
BOOL                 : 33
CHAR                 : 31
COMMA                : 9
DECREMENT            : 11
DIVIDE               : 16
DOUBLE               : 30
EQUAL                : 5 6
GE                   : 20
GT                   : 24
IDENTIFIER           : 5 6 10 11 12 34
INCREMENT            : 10
INT                  : 29
ISEQUAL              : 21
LE                   : 19
LPARAN               : 7 27
LT                   : 23
MINUS                : 12 14
MODULO               : 17
MULTIPLY             : 15
NOT                  : 28
NOTEQUAL             : 22
OR                   : 26
PLUS                 : 13
POWER                : 18
PRINT                : 7
RPARAN               : 7 27
SEMICOLON            : 3
STRING               : 32
VARTYPE              : 5
error                : 

Nonterminals, with rules where they appear

exp                  : 4 5 6 8 9 13 13 14 14 15 15 16 16 17 17 18 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 28
exps                 : 7 9
line                 : 0
stmt                 : 2 3
stmts                : 1 3

Parsing method: LALR

state 0

    (0) S' -> . line
    (1) line -> . stmts
    (2) stmts -> . stmt
    (3) stmts -> . stmt SEMICOLON stmts
    (4) stmt -> . exp
    (5) stmt -> . VARTYPE IDENTIFIER EQUAL exp
    (6) stmt -> . IDENTIFIER EQUAL exp
    (7) stmt -> . PRINT LPARAN exps RPARAN
    (10) stmt -> . IDENTIFIER INCREMENT
    (11) stmt -> . IDENTIFIER DECREMENT
    (12) exp -> . MINUS IDENTIFIER
    (13) exp -> . exp PLUS exp
    (14) exp -> . exp MINUS exp
    (15) exp -> . exp MULTIPLY exp
    (16) exp -> . exp DIVIDE exp
    (17) exp -> . exp MODULO exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp LE exp
    (20) exp -> . exp GE exp
    (21) exp -> . exp ISEQUAL exp
    (22) exp -> . exp NOTEQUAL exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GT exp
    (25) exp -> . exp AND exp
    (26) exp -> . exp OR exp
    (27) exp -> . LPARAN exp RPARAN
    (28) exp -> . NOT exp
    (29) exp -> . INT
    (30) exp -> . DOUBLE
    (31) exp -> . CHAR
    (32) exp -> . STRING
    (33) exp -> . BOOL
    (34) exp -> . IDENTIFIER

    VARTYPE         shift and go to state 5
    IDENTIFIER      shift and go to state 6
    PRINT           shift and go to state 7
    MINUS           shift and go to state 9
    LPARAN          shift and go to state 8
    NOT             shift and go to state 10
    INT             shift and go to state 11
    DOUBLE          shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15

    line                           shift and go to state 1
    stmts                          shift and go to state 2
    stmt                           shift and go to state 3
    exp                            shift and go to state 4

state 1

    (0) S' -> line .



state 2

    (1) line -> stmts .

    $end            reduce using rule 1 (line -> stmts .)


state 3

    (2) stmts -> stmt .
    (3) stmts -> stmt . SEMICOLON stmts

    $end            reduce using rule 2 (stmts -> stmt .)
    SEMICOLON       shift and go to state 16


state 4

    (4) stmt -> exp .
    (13) exp -> exp . PLUS exp
    (14) exp -> exp . MINUS exp
    (15) exp -> exp . MULTIPLY exp
    (16) exp -> exp . DIVIDE exp
    (17) exp -> exp . MODULO exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . LE exp
    (20) exp -> exp . GE exp
    (21) exp -> exp . ISEQUAL exp
    (22) exp -> exp . NOTEQUAL exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GT exp
    (25) exp -> exp . AND exp
    (26) exp -> exp . OR exp

    SEMICOLON       reduce using rule 4 (stmt -> exp .)
    $end            reduce using rule 4 (stmt -> exp .)
    PLUS            shift and go to state 17
    MINUS           shift and go to state 18
    MULTIPLY        shift and go to state 19
    DIVIDE          shift and go to state 20
    MODULO          shift and go to state 21
    POWER           shift and go to state 22
    LE              shift and go to state 23
    GE              shift and go to state 24
    ISEQUAL         shift and go to state 25
    NOTEQUAL        shift and go to state 26
    LT              shift and go to state 27
    GT              shift and go to state 28
    AND             shift and go to state 29
    OR              shift and go to state 30


state 5

    (5) stmt -> VARTYPE . IDENTIFIER EQUAL exp

    IDENTIFIER      shift and go to state 31


state 6

    (6) stmt -> IDENTIFIER . EQUAL exp
    (10) stmt -> IDENTIFIER . INCREMENT
    (11) stmt -> IDENTIFIER . DECREMENT
    (34) exp -> IDENTIFIER .

    EQUAL           shift and go to state 32
    INCREMENT       shift and go to state 33
    DECREMENT       shift and go to state 34
    PLUS            reduce using rule 34 (exp -> IDENTIFIER .)
    MINUS           reduce using rule 34 (exp -> IDENTIFIER .)
    MULTIPLY        reduce using rule 34 (exp -> IDENTIFIER .)
    DIVIDE          reduce using rule 34 (exp -> IDENTIFIER .)
    MODULO          reduce using rule 34 (exp -> IDENTIFIER .)
    POWER           reduce using rule 34 (exp -> IDENTIFIER .)
    LE              reduce using rule 34 (exp -> IDENTIFIER .)
    GE              reduce using rule 34 (exp -> IDENTIFIER .)
    ISEQUAL         reduce using rule 34 (exp -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 34 (exp -> IDENTIFIER .)
    LT              reduce using rule 34 (exp -> IDENTIFIER .)
    GT              reduce using rule 34 (exp -> IDENTIFIER .)
    AND             reduce using rule 34 (exp -> IDENTIFIER .)
    OR              reduce using rule 34 (exp -> IDENTIFIER .)
    SEMICOLON       reduce using rule 34 (exp -> IDENTIFIER .)
    $end            reduce using rule 34 (exp -> IDENTIFIER .)


state 7

    (7) stmt -> PRINT . LPARAN exps RPARAN

    LPARAN          shift and go to state 35


state 8

    (27) exp -> LPARAN . exp RPARAN
    (12) exp -> . MINUS IDENTIFIER
    (13) exp -> . exp PLUS exp
    (14) exp -> . exp MINUS exp
    (15) exp -> . exp MULTIPLY exp
    (16) exp -> . exp DIVIDE exp
    (17) exp -> . exp MODULO exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp LE exp
    (20) exp -> . exp GE exp
    (21) exp -> . exp ISEQUAL exp
    (22) exp -> . exp NOTEQUAL exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GT exp
    (25) exp -> . exp AND exp
    (26) exp -> . exp OR exp
    (27) exp -> . LPARAN exp RPARAN
    (28) exp -> . NOT exp
    (29) exp -> . INT
    (30) exp -> . DOUBLE
    (31) exp -> . CHAR
    (32) exp -> . STRING
    (33) exp -> . BOOL
    (34) exp -> . IDENTIFIER

    MINUS           shift and go to state 9
    LPARAN          shift and go to state 8
    NOT             shift and go to state 10
    INT             shift and go to state 11
    DOUBLE          shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    IDENTIFIER      shift and go to state 37

    exp                            shift and go to state 36

state 9

    (12) exp -> MINUS . IDENTIFIER

    IDENTIFIER      shift and go to state 38


state 10

    (28) exp -> NOT . exp
    (12) exp -> . MINUS IDENTIFIER
    (13) exp -> . exp PLUS exp
    (14) exp -> . exp MINUS exp
    (15) exp -> . exp MULTIPLY exp
    (16) exp -> . exp DIVIDE exp
    (17) exp -> . exp MODULO exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp LE exp
    (20) exp -> . exp GE exp
    (21) exp -> . exp ISEQUAL exp
    (22) exp -> . exp NOTEQUAL exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GT exp
    (25) exp -> . exp AND exp
    (26) exp -> . exp OR exp
    (27) exp -> . LPARAN exp RPARAN
    (28) exp -> . NOT exp
    (29) exp -> . INT
    (30) exp -> . DOUBLE
    (31) exp -> . CHAR
    (32) exp -> . STRING
    (33) exp -> . BOOL
    (34) exp -> . IDENTIFIER

    MINUS           shift and go to state 9
    LPARAN          shift and go to state 8
    NOT             shift and go to state 10
    INT             shift and go to state 11
    DOUBLE          shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    IDENTIFIER      shift and go to state 37

    exp                            shift and go to state 39

state 11

    (29) exp -> INT .

    PLUS            reduce using rule 29 (exp -> INT .)
    MINUS           reduce using rule 29 (exp -> INT .)
    MULTIPLY        reduce using rule 29 (exp -> INT .)
    DIVIDE          reduce using rule 29 (exp -> INT .)
    MODULO          reduce using rule 29 (exp -> INT .)
    POWER           reduce using rule 29 (exp -> INT .)
    LE              reduce using rule 29 (exp -> INT .)
    GE              reduce using rule 29 (exp -> INT .)
    ISEQUAL         reduce using rule 29 (exp -> INT .)
    NOTEQUAL        reduce using rule 29 (exp -> INT .)
    LT              reduce using rule 29 (exp -> INT .)
    GT              reduce using rule 29 (exp -> INT .)
    AND             reduce using rule 29 (exp -> INT .)
    OR              reduce using rule 29 (exp -> INT .)
    SEMICOLON       reduce using rule 29 (exp -> INT .)
    $end            reduce using rule 29 (exp -> INT .)
    RPARAN          reduce using rule 29 (exp -> INT .)
    COMMA           reduce using rule 29 (exp -> INT .)


state 12

    (30) exp -> DOUBLE .

    PLUS            reduce using rule 30 (exp -> DOUBLE .)
    MINUS           reduce using rule 30 (exp -> DOUBLE .)
    MULTIPLY        reduce using rule 30 (exp -> DOUBLE .)
    DIVIDE          reduce using rule 30 (exp -> DOUBLE .)
    MODULO          reduce using rule 30 (exp -> DOUBLE .)
    POWER           reduce using rule 30 (exp -> DOUBLE .)
    LE              reduce using rule 30 (exp -> DOUBLE .)
    GE              reduce using rule 30 (exp -> DOUBLE .)
    ISEQUAL         reduce using rule 30 (exp -> DOUBLE .)
    NOTEQUAL        reduce using rule 30 (exp -> DOUBLE .)
    LT              reduce using rule 30 (exp -> DOUBLE .)
    GT              reduce using rule 30 (exp -> DOUBLE .)
    AND             reduce using rule 30 (exp -> DOUBLE .)
    OR              reduce using rule 30 (exp -> DOUBLE .)
    SEMICOLON       reduce using rule 30 (exp -> DOUBLE .)
    $end            reduce using rule 30 (exp -> DOUBLE .)
    RPARAN          reduce using rule 30 (exp -> DOUBLE .)
    COMMA           reduce using rule 30 (exp -> DOUBLE .)


state 13

    (31) exp -> CHAR .

    PLUS            reduce using rule 31 (exp -> CHAR .)
    MINUS           reduce using rule 31 (exp -> CHAR .)
    MULTIPLY        reduce using rule 31 (exp -> CHAR .)
    DIVIDE          reduce using rule 31 (exp -> CHAR .)
    MODULO          reduce using rule 31 (exp -> CHAR .)
    POWER           reduce using rule 31 (exp -> CHAR .)
    LE              reduce using rule 31 (exp -> CHAR .)
    GE              reduce using rule 31 (exp -> CHAR .)
    ISEQUAL         reduce using rule 31 (exp -> CHAR .)
    NOTEQUAL        reduce using rule 31 (exp -> CHAR .)
    LT              reduce using rule 31 (exp -> CHAR .)
    GT              reduce using rule 31 (exp -> CHAR .)
    AND             reduce using rule 31 (exp -> CHAR .)
    OR              reduce using rule 31 (exp -> CHAR .)
    SEMICOLON       reduce using rule 31 (exp -> CHAR .)
    $end            reduce using rule 31 (exp -> CHAR .)
    RPARAN          reduce using rule 31 (exp -> CHAR .)
    COMMA           reduce using rule 31 (exp -> CHAR .)


state 14

    (32) exp -> STRING .

    PLUS            reduce using rule 32 (exp -> STRING .)
    MINUS           reduce using rule 32 (exp -> STRING .)
    MULTIPLY        reduce using rule 32 (exp -> STRING .)
    DIVIDE          reduce using rule 32 (exp -> STRING .)
    MODULO          reduce using rule 32 (exp -> STRING .)
    POWER           reduce using rule 32 (exp -> STRING .)
    LE              reduce using rule 32 (exp -> STRING .)
    GE              reduce using rule 32 (exp -> STRING .)
    ISEQUAL         reduce using rule 32 (exp -> STRING .)
    NOTEQUAL        reduce using rule 32 (exp -> STRING .)
    LT              reduce using rule 32 (exp -> STRING .)
    GT              reduce using rule 32 (exp -> STRING .)
    AND             reduce using rule 32 (exp -> STRING .)
    OR              reduce using rule 32 (exp -> STRING .)
    SEMICOLON       reduce using rule 32 (exp -> STRING .)
    $end            reduce using rule 32 (exp -> STRING .)
    RPARAN          reduce using rule 32 (exp -> STRING .)
    COMMA           reduce using rule 32 (exp -> STRING .)


state 15

    (33) exp -> BOOL .

    PLUS            reduce using rule 33 (exp -> BOOL .)
    MINUS           reduce using rule 33 (exp -> BOOL .)
    MULTIPLY        reduce using rule 33 (exp -> BOOL .)
    DIVIDE          reduce using rule 33 (exp -> BOOL .)
    MODULO          reduce using rule 33 (exp -> BOOL .)
    POWER           reduce using rule 33 (exp -> BOOL .)
    LE              reduce using rule 33 (exp -> BOOL .)
    GE              reduce using rule 33 (exp -> BOOL .)
    ISEQUAL         reduce using rule 33 (exp -> BOOL .)
    NOTEQUAL        reduce using rule 33 (exp -> BOOL .)
    LT              reduce using rule 33 (exp -> BOOL .)
    GT              reduce using rule 33 (exp -> BOOL .)
    AND             reduce using rule 33 (exp -> BOOL .)
    OR              reduce using rule 33 (exp -> BOOL .)
    SEMICOLON       reduce using rule 33 (exp -> BOOL .)
    $end            reduce using rule 33 (exp -> BOOL .)
    RPARAN          reduce using rule 33 (exp -> BOOL .)
    COMMA           reduce using rule 33 (exp -> BOOL .)


state 16

    (3) stmts -> stmt SEMICOLON . stmts
    (2) stmts -> . stmt
    (3) stmts -> . stmt SEMICOLON stmts
    (4) stmt -> . exp
    (5) stmt -> . VARTYPE IDENTIFIER EQUAL exp
    (6) stmt -> . IDENTIFIER EQUAL exp
    (7) stmt -> . PRINT LPARAN exps RPARAN
    (10) stmt -> . IDENTIFIER INCREMENT
    (11) stmt -> . IDENTIFIER DECREMENT
    (12) exp -> . MINUS IDENTIFIER
    (13) exp -> . exp PLUS exp
    (14) exp -> . exp MINUS exp
    (15) exp -> . exp MULTIPLY exp
    (16) exp -> . exp DIVIDE exp
    (17) exp -> . exp MODULO exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp LE exp
    (20) exp -> . exp GE exp
    (21) exp -> . exp ISEQUAL exp
    (22) exp -> . exp NOTEQUAL exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GT exp
    (25) exp -> . exp AND exp
    (26) exp -> . exp OR exp
    (27) exp -> . LPARAN exp RPARAN
    (28) exp -> . NOT exp
    (29) exp -> . INT
    (30) exp -> . DOUBLE
    (31) exp -> . CHAR
    (32) exp -> . STRING
    (33) exp -> . BOOL
    (34) exp -> . IDENTIFIER

    VARTYPE         shift and go to state 5
    IDENTIFIER      shift and go to state 6
    PRINT           shift and go to state 7
    MINUS           shift and go to state 9
    LPARAN          shift and go to state 8
    NOT             shift and go to state 10
    INT             shift and go to state 11
    DOUBLE          shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15

    stmt                           shift and go to state 3
    stmts                          shift and go to state 40
    exp                            shift and go to state 4

state 17

    (13) exp -> exp PLUS . exp
    (12) exp -> . MINUS IDENTIFIER
    (13) exp -> . exp PLUS exp
    (14) exp -> . exp MINUS exp
    (15) exp -> . exp MULTIPLY exp
    (16) exp -> . exp DIVIDE exp
    (17) exp -> . exp MODULO exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp LE exp
    (20) exp -> . exp GE exp
    (21) exp -> . exp ISEQUAL exp
    (22) exp -> . exp NOTEQUAL exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GT exp
    (25) exp -> . exp AND exp
    (26) exp -> . exp OR exp
    (27) exp -> . LPARAN exp RPARAN
    (28) exp -> . NOT exp
    (29) exp -> . INT
    (30) exp -> . DOUBLE
    (31) exp -> . CHAR
    (32) exp -> . STRING
    (33) exp -> . BOOL
    (34) exp -> . IDENTIFIER

    MINUS           shift and go to state 9
    LPARAN          shift and go to state 8
    NOT             shift and go to state 10
    INT             shift and go to state 11
    DOUBLE          shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    IDENTIFIER      shift and go to state 37

    exp                            shift and go to state 41

state 18

    (14) exp -> exp MINUS . exp
    (12) exp -> . MINUS IDENTIFIER
    (13) exp -> . exp PLUS exp
    (14) exp -> . exp MINUS exp
    (15) exp -> . exp MULTIPLY exp
    (16) exp -> . exp DIVIDE exp
    (17) exp -> . exp MODULO exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp LE exp
    (20) exp -> . exp GE exp
    (21) exp -> . exp ISEQUAL exp
    (22) exp -> . exp NOTEQUAL exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GT exp
    (25) exp -> . exp AND exp
    (26) exp -> . exp OR exp
    (27) exp -> . LPARAN exp RPARAN
    (28) exp -> . NOT exp
    (29) exp -> . INT
    (30) exp -> . DOUBLE
    (31) exp -> . CHAR
    (32) exp -> . STRING
    (33) exp -> . BOOL
    (34) exp -> . IDENTIFIER

    MINUS           shift and go to state 9
    LPARAN          shift and go to state 8
    NOT             shift and go to state 10
    INT             shift and go to state 11
    DOUBLE          shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    IDENTIFIER      shift and go to state 37

    exp                            shift and go to state 42

state 19

    (15) exp -> exp MULTIPLY . exp
    (12) exp -> . MINUS IDENTIFIER
    (13) exp -> . exp PLUS exp
    (14) exp -> . exp MINUS exp
    (15) exp -> . exp MULTIPLY exp
    (16) exp -> . exp DIVIDE exp
    (17) exp -> . exp MODULO exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp LE exp
    (20) exp -> . exp GE exp
    (21) exp -> . exp ISEQUAL exp
    (22) exp -> . exp NOTEQUAL exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GT exp
    (25) exp -> . exp AND exp
    (26) exp -> . exp OR exp
    (27) exp -> . LPARAN exp RPARAN
    (28) exp -> . NOT exp
    (29) exp -> . INT
    (30) exp -> . DOUBLE
    (31) exp -> . CHAR
    (32) exp -> . STRING
    (33) exp -> . BOOL
    (34) exp -> . IDENTIFIER

    MINUS           shift and go to state 9
    LPARAN          shift and go to state 8
    NOT             shift and go to state 10
    INT             shift and go to state 11
    DOUBLE          shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    IDENTIFIER      shift and go to state 37

    exp                            shift and go to state 43

state 20

    (16) exp -> exp DIVIDE . exp
    (12) exp -> . MINUS IDENTIFIER
    (13) exp -> . exp PLUS exp
    (14) exp -> . exp MINUS exp
    (15) exp -> . exp MULTIPLY exp
    (16) exp -> . exp DIVIDE exp
    (17) exp -> . exp MODULO exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp LE exp
    (20) exp -> . exp GE exp
    (21) exp -> . exp ISEQUAL exp
    (22) exp -> . exp NOTEQUAL exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GT exp
    (25) exp -> . exp AND exp
    (26) exp -> . exp OR exp
    (27) exp -> . LPARAN exp RPARAN
    (28) exp -> . NOT exp
    (29) exp -> . INT
    (30) exp -> . DOUBLE
    (31) exp -> . CHAR
    (32) exp -> . STRING
    (33) exp -> . BOOL
    (34) exp -> . IDENTIFIER

    MINUS           shift and go to state 9
    LPARAN          shift and go to state 8
    NOT             shift and go to state 10
    INT             shift and go to state 11
    DOUBLE          shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    IDENTIFIER      shift and go to state 37

    exp                            shift and go to state 44

state 21

    (17) exp -> exp MODULO . exp
    (12) exp -> . MINUS IDENTIFIER
    (13) exp -> . exp PLUS exp
    (14) exp -> . exp MINUS exp
    (15) exp -> . exp MULTIPLY exp
    (16) exp -> . exp DIVIDE exp
    (17) exp -> . exp MODULO exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp LE exp
    (20) exp -> . exp GE exp
    (21) exp -> . exp ISEQUAL exp
    (22) exp -> . exp NOTEQUAL exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GT exp
    (25) exp -> . exp AND exp
    (26) exp -> . exp OR exp
    (27) exp -> . LPARAN exp RPARAN
    (28) exp -> . NOT exp
    (29) exp -> . INT
    (30) exp -> . DOUBLE
    (31) exp -> . CHAR
    (32) exp -> . STRING
    (33) exp -> . BOOL
    (34) exp -> . IDENTIFIER

    MINUS           shift and go to state 9
    LPARAN          shift and go to state 8
    NOT             shift and go to state 10
    INT             shift and go to state 11
    DOUBLE          shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    IDENTIFIER      shift and go to state 37

    exp                            shift and go to state 45

state 22

    (18) exp -> exp POWER . exp
    (12) exp -> . MINUS IDENTIFIER
    (13) exp -> . exp PLUS exp
    (14) exp -> . exp MINUS exp
    (15) exp -> . exp MULTIPLY exp
    (16) exp -> . exp DIVIDE exp
    (17) exp -> . exp MODULO exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp LE exp
    (20) exp -> . exp GE exp
    (21) exp -> . exp ISEQUAL exp
    (22) exp -> . exp NOTEQUAL exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GT exp
    (25) exp -> . exp AND exp
    (26) exp -> . exp OR exp
    (27) exp -> . LPARAN exp RPARAN
    (28) exp -> . NOT exp
    (29) exp -> . INT
    (30) exp -> . DOUBLE
    (31) exp -> . CHAR
    (32) exp -> . STRING
    (33) exp -> . BOOL
    (34) exp -> . IDENTIFIER

    MINUS           shift and go to state 9
    LPARAN          shift and go to state 8
    NOT             shift and go to state 10
    INT             shift and go to state 11
    DOUBLE          shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    IDENTIFIER      shift and go to state 37

    exp                            shift and go to state 46

state 23

    (19) exp -> exp LE . exp
    (12) exp -> . MINUS IDENTIFIER
    (13) exp -> . exp PLUS exp
    (14) exp -> . exp MINUS exp
    (15) exp -> . exp MULTIPLY exp
    (16) exp -> . exp DIVIDE exp
    (17) exp -> . exp MODULO exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp LE exp
    (20) exp -> . exp GE exp
    (21) exp -> . exp ISEQUAL exp
    (22) exp -> . exp NOTEQUAL exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GT exp
    (25) exp -> . exp AND exp
    (26) exp -> . exp OR exp
    (27) exp -> . LPARAN exp RPARAN
    (28) exp -> . NOT exp
    (29) exp -> . INT
    (30) exp -> . DOUBLE
    (31) exp -> . CHAR
    (32) exp -> . STRING
    (33) exp -> . BOOL
    (34) exp -> . IDENTIFIER

    MINUS           shift and go to state 9
    LPARAN          shift and go to state 8
    NOT             shift and go to state 10
    INT             shift and go to state 11
    DOUBLE          shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    IDENTIFIER      shift and go to state 37

    exp                            shift and go to state 47

state 24

    (20) exp -> exp GE . exp
    (12) exp -> . MINUS IDENTIFIER
    (13) exp -> . exp PLUS exp
    (14) exp -> . exp MINUS exp
    (15) exp -> . exp MULTIPLY exp
    (16) exp -> . exp DIVIDE exp
    (17) exp -> . exp MODULO exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp LE exp
    (20) exp -> . exp GE exp
    (21) exp -> . exp ISEQUAL exp
    (22) exp -> . exp NOTEQUAL exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GT exp
    (25) exp -> . exp AND exp
    (26) exp -> . exp OR exp
    (27) exp -> . LPARAN exp RPARAN
    (28) exp -> . NOT exp
    (29) exp -> . INT
    (30) exp -> . DOUBLE
    (31) exp -> . CHAR
    (32) exp -> . STRING
    (33) exp -> . BOOL
    (34) exp -> . IDENTIFIER

    MINUS           shift and go to state 9
    LPARAN          shift and go to state 8
    NOT             shift and go to state 10
    INT             shift and go to state 11
    DOUBLE          shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    IDENTIFIER      shift and go to state 37

    exp                            shift and go to state 48

state 25

    (21) exp -> exp ISEQUAL . exp
    (12) exp -> . MINUS IDENTIFIER
    (13) exp -> . exp PLUS exp
    (14) exp -> . exp MINUS exp
    (15) exp -> . exp MULTIPLY exp
    (16) exp -> . exp DIVIDE exp
    (17) exp -> . exp MODULO exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp LE exp
    (20) exp -> . exp GE exp
    (21) exp -> . exp ISEQUAL exp
    (22) exp -> . exp NOTEQUAL exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GT exp
    (25) exp -> . exp AND exp
    (26) exp -> . exp OR exp
    (27) exp -> . LPARAN exp RPARAN
    (28) exp -> . NOT exp
    (29) exp -> . INT
    (30) exp -> . DOUBLE
    (31) exp -> . CHAR
    (32) exp -> . STRING
    (33) exp -> . BOOL
    (34) exp -> . IDENTIFIER

    MINUS           shift and go to state 9
    LPARAN          shift and go to state 8
    NOT             shift and go to state 10
    INT             shift and go to state 11
    DOUBLE          shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    IDENTIFIER      shift and go to state 37

    exp                            shift and go to state 49

state 26

    (22) exp -> exp NOTEQUAL . exp
    (12) exp -> . MINUS IDENTIFIER
    (13) exp -> . exp PLUS exp
    (14) exp -> . exp MINUS exp
    (15) exp -> . exp MULTIPLY exp
    (16) exp -> . exp DIVIDE exp
    (17) exp -> . exp MODULO exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp LE exp
    (20) exp -> . exp GE exp
    (21) exp -> . exp ISEQUAL exp
    (22) exp -> . exp NOTEQUAL exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GT exp
    (25) exp -> . exp AND exp
    (26) exp -> . exp OR exp
    (27) exp -> . LPARAN exp RPARAN
    (28) exp -> . NOT exp
    (29) exp -> . INT
    (30) exp -> . DOUBLE
    (31) exp -> . CHAR
    (32) exp -> . STRING
    (33) exp -> . BOOL
    (34) exp -> . IDENTIFIER

    MINUS           shift and go to state 9
    LPARAN          shift and go to state 8
    NOT             shift and go to state 10
    INT             shift and go to state 11
    DOUBLE          shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    IDENTIFIER      shift and go to state 37

    exp                            shift and go to state 50

state 27

    (23) exp -> exp LT . exp
    (12) exp -> . MINUS IDENTIFIER
    (13) exp -> . exp PLUS exp
    (14) exp -> . exp MINUS exp
    (15) exp -> . exp MULTIPLY exp
    (16) exp -> . exp DIVIDE exp
    (17) exp -> . exp MODULO exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp LE exp
    (20) exp -> . exp GE exp
    (21) exp -> . exp ISEQUAL exp
    (22) exp -> . exp NOTEQUAL exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GT exp
    (25) exp -> . exp AND exp
    (26) exp -> . exp OR exp
    (27) exp -> . LPARAN exp RPARAN
    (28) exp -> . NOT exp
    (29) exp -> . INT
    (30) exp -> . DOUBLE
    (31) exp -> . CHAR
    (32) exp -> . STRING
    (33) exp -> . BOOL
    (34) exp -> . IDENTIFIER

    MINUS           shift and go to state 9
    LPARAN          shift and go to state 8
    NOT             shift and go to state 10
    INT             shift and go to state 11
    DOUBLE          shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    IDENTIFIER      shift and go to state 37

    exp                            shift and go to state 51

state 28

    (24) exp -> exp GT . exp
    (12) exp -> . MINUS IDENTIFIER
    (13) exp -> . exp PLUS exp
    (14) exp -> . exp MINUS exp
    (15) exp -> . exp MULTIPLY exp
    (16) exp -> . exp DIVIDE exp
    (17) exp -> . exp MODULO exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp LE exp
    (20) exp -> . exp GE exp
    (21) exp -> . exp ISEQUAL exp
    (22) exp -> . exp NOTEQUAL exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GT exp
    (25) exp -> . exp AND exp
    (26) exp -> . exp OR exp
    (27) exp -> . LPARAN exp RPARAN
    (28) exp -> . NOT exp
    (29) exp -> . INT
    (30) exp -> . DOUBLE
    (31) exp -> . CHAR
    (32) exp -> . STRING
    (33) exp -> . BOOL
    (34) exp -> . IDENTIFIER

    MINUS           shift and go to state 9
    LPARAN          shift and go to state 8
    NOT             shift and go to state 10
    INT             shift and go to state 11
    DOUBLE          shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    IDENTIFIER      shift and go to state 37

    exp                            shift and go to state 52

state 29

    (25) exp -> exp AND . exp
    (12) exp -> . MINUS IDENTIFIER
    (13) exp -> . exp PLUS exp
    (14) exp -> . exp MINUS exp
    (15) exp -> . exp MULTIPLY exp
    (16) exp -> . exp DIVIDE exp
    (17) exp -> . exp MODULO exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp LE exp
    (20) exp -> . exp GE exp
    (21) exp -> . exp ISEQUAL exp
    (22) exp -> . exp NOTEQUAL exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GT exp
    (25) exp -> . exp AND exp
    (26) exp -> . exp OR exp
    (27) exp -> . LPARAN exp RPARAN
    (28) exp -> . NOT exp
    (29) exp -> . INT
    (30) exp -> . DOUBLE
    (31) exp -> . CHAR
    (32) exp -> . STRING
    (33) exp -> . BOOL
    (34) exp -> . IDENTIFIER

    MINUS           shift and go to state 9
    LPARAN          shift and go to state 8
    NOT             shift and go to state 10
    INT             shift and go to state 11
    DOUBLE          shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    IDENTIFIER      shift and go to state 37

    exp                            shift and go to state 53

state 30

    (26) exp -> exp OR . exp
    (12) exp -> . MINUS IDENTIFIER
    (13) exp -> . exp PLUS exp
    (14) exp -> . exp MINUS exp
    (15) exp -> . exp MULTIPLY exp
    (16) exp -> . exp DIVIDE exp
    (17) exp -> . exp MODULO exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp LE exp
    (20) exp -> . exp GE exp
    (21) exp -> . exp ISEQUAL exp
    (22) exp -> . exp NOTEQUAL exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GT exp
    (25) exp -> . exp AND exp
    (26) exp -> . exp OR exp
    (27) exp -> . LPARAN exp RPARAN
    (28) exp -> . NOT exp
    (29) exp -> . INT
    (30) exp -> . DOUBLE
    (31) exp -> . CHAR
    (32) exp -> . STRING
    (33) exp -> . BOOL
    (34) exp -> . IDENTIFIER

    MINUS           shift and go to state 9
    LPARAN          shift and go to state 8
    NOT             shift and go to state 10
    INT             shift and go to state 11
    DOUBLE          shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    IDENTIFIER      shift and go to state 37

    exp                            shift and go to state 54

state 31

    (5) stmt -> VARTYPE IDENTIFIER . EQUAL exp

    EQUAL           shift and go to state 55


state 32

    (6) stmt -> IDENTIFIER EQUAL . exp
    (12) exp -> . MINUS IDENTIFIER
    (13) exp -> . exp PLUS exp
    (14) exp -> . exp MINUS exp
    (15) exp -> . exp MULTIPLY exp
    (16) exp -> . exp DIVIDE exp
    (17) exp -> . exp MODULO exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp LE exp
    (20) exp -> . exp GE exp
    (21) exp -> . exp ISEQUAL exp
    (22) exp -> . exp NOTEQUAL exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GT exp
    (25) exp -> . exp AND exp
    (26) exp -> . exp OR exp
    (27) exp -> . LPARAN exp RPARAN
    (28) exp -> . NOT exp
    (29) exp -> . INT
    (30) exp -> . DOUBLE
    (31) exp -> . CHAR
    (32) exp -> . STRING
    (33) exp -> . BOOL
    (34) exp -> . IDENTIFIER

    MINUS           shift and go to state 9
    LPARAN          shift and go to state 8
    NOT             shift and go to state 10
    INT             shift and go to state 11
    DOUBLE          shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    IDENTIFIER      shift and go to state 37

    exp                            shift and go to state 56

state 33

    (10) stmt -> IDENTIFIER INCREMENT .

    SEMICOLON       reduce using rule 10 (stmt -> IDENTIFIER INCREMENT .)
    $end            reduce using rule 10 (stmt -> IDENTIFIER INCREMENT .)


state 34

    (11) stmt -> IDENTIFIER DECREMENT .

    SEMICOLON       reduce using rule 11 (stmt -> IDENTIFIER DECREMENT .)
    $end            reduce using rule 11 (stmt -> IDENTIFIER DECREMENT .)


state 35

    (7) stmt -> PRINT LPARAN . exps RPARAN
    (8) exps -> . exp
    (9) exps -> . exp COMMA exps
    (12) exp -> . MINUS IDENTIFIER
    (13) exp -> . exp PLUS exp
    (14) exp -> . exp MINUS exp
    (15) exp -> . exp MULTIPLY exp
    (16) exp -> . exp DIVIDE exp
    (17) exp -> . exp MODULO exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp LE exp
    (20) exp -> . exp GE exp
    (21) exp -> . exp ISEQUAL exp
    (22) exp -> . exp NOTEQUAL exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GT exp
    (25) exp -> . exp AND exp
    (26) exp -> . exp OR exp
    (27) exp -> . LPARAN exp RPARAN
    (28) exp -> . NOT exp
    (29) exp -> . INT
    (30) exp -> . DOUBLE
    (31) exp -> . CHAR
    (32) exp -> . STRING
    (33) exp -> . BOOL
    (34) exp -> . IDENTIFIER

    MINUS           shift and go to state 9
    LPARAN          shift and go to state 8
    NOT             shift and go to state 10
    INT             shift and go to state 11
    DOUBLE          shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    IDENTIFIER      shift and go to state 37

    exps                           shift and go to state 57
    exp                            shift and go to state 58

state 36

    (27) exp -> LPARAN exp . RPARAN
    (13) exp -> exp . PLUS exp
    (14) exp -> exp . MINUS exp
    (15) exp -> exp . MULTIPLY exp
    (16) exp -> exp . DIVIDE exp
    (17) exp -> exp . MODULO exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . LE exp
    (20) exp -> exp . GE exp
    (21) exp -> exp . ISEQUAL exp
    (22) exp -> exp . NOTEQUAL exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GT exp
    (25) exp -> exp . AND exp
    (26) exp -> exp . OR exp

    RPARAN          shift and go to state 59
    PLUS            shift and go to state 17
    MINUS           shift and go to state 18
    MULTIPLY        shift and go to state 19
    DIVIDE          shift and go to state 20
    MODULO          shift and go to state 21
    POWER           shift and go to state 22
    LE              shift and go to state 23
    GE              shift and go to state 24
    ISEQUAL         shift and go to state 25
    NOTEQUAL        shift and go to state 26
    LT              shift and go to state 27
    GT              shift and go to state 28
    AND             shift and go to state 29
    OR              shift and go to state 30


state 37

    (34) exp -> IDENTIFIER .

    RPARAN          reduce using rule 34 (exp -> IDENTIFIER .)
    PLUS            reduce using rule 34 (exp -> IDENTIFIER .)
    MINUS           reduce using rule 34 (exp -> IDENTIFIER .)
    MULTIPLY        reduce using rule 34 (exp -> IDENTIFIER .)
    DIVIDE          reduce using rule 34 (exp -> IDENTIFIER .)
    MODULO          reduce using rule 34 (exp -> IDENTIFIER .)
    POWER           reduce using rule 34 (exp -> IDENTIFIER .)
    LE              reduce using rule 34 (exp -> IDENTIFIER .)
    GE              reduce using rule 34 (exp -> IDENTIFIER .)
    ISEQUAL         reduce using rule 34 (exp -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 34 (exp -> IDENTIFIER .)
    LT              reduce using rule 34 (exp -> IDENTIFIER .)
    GT              reduce using rule 34 (exp -> IDENTIFIER .)
    AND             reduce using rule 34 (exp -> IDENTIFIER .)
    OR              reduce using rule 34 (exp -> IDENTIFIER .)
    SEMICOLON       reduce using rule 34 (exp -> IDENTIFIER .)
    $end            reduce using rule 34 (exp -> IDENTIFIER .)
    COMMA           reduce using rule 34 (exp -> IDENTIFIER .)


state 38

    (12) exp -> MINUS IDENTIFIER .

    PLUS            reduce using rule 12 (exp -> MINUS IDENTIFIER .)
    MINUS           reduce using rule 12 (exp -> MINUS IDENTIFIER .)
    MULTIPLY        reduce using rule 12 (exp -> MINUS IDENTIFIER .)
    DIVIDE          reduce using rule 12 (exp -> MINUS IDENTIFIER .)
    MODULO          reduce using rule 12 (exp -> MINUS IDENTIFIER .)
    POWER           reduce using rule 12 (exp -> MINUS IDENTIFIER .)
    LE              reduce using rule 12 (exp -> MINUS IDENTIFIER .)
    GE              reduce using rule 12 (exp -> MINUS IDENTIFIER .)
    ISEQUAL         reduce using rule 12 (exp -> MINUS IDENTIFIER .)
    NOTEQUAL        reduce using rule 12 (exp -> MINUS IDENTIFIER .)
    LT              reduce using rule 12 (exp -> MINUS IDENTIFIER .)
    GT              reduce using rule 12 (exp -> MINUS IDENTIFIER .)
    AND             reduce using rule 12 (exp -> MINUS IDENTIFIER .)
    OR              reduce using rule 12 (exp -> MINUS IDENTIFIER .)
    SEMICOLON       reduce using rule 12 (exp -> MINUS IDENTIFIER .)
    $end            reduce using rule 12 (exp -> MINUS IDENTIFIER .)
    RPARAN          reduce using rule 12 (exp -> MINUS IDENTIFIER .)
    COMMA           reduce using rule 12 (exp -> MINUS IDENTIFIER .)


state 39

    (28) exp -> NOT exp .
    (13) exp -> exp . PLUS exp
    (14) exp -> exp . MINUS exp
    (15) exp -> exp . MULTIPLY exp
    (16) exp -> exp . DIVIDE exp
    (17) exp -> exp . MODULO exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . LE exp
    (20) exp -> exp . GE exp
    (21) exp -> exp . ISEQUAL exp
    (22) exp -> exp . NOTEQUAL exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GT exp
    (25) exp -> exp . AND exp
    (26) exp -> exp . OR exp

    PLUS            reduce using rule 28 (exp -> NOT exp .)
    MINUS           reduce using rule 28 (exp -> NOT exp .)
    MULTIPLY        reduce using rule 28 (exp -> NOT exp .)
    DIVIDE          reduce using rule 28 (exp -> NOT exp .)
    MODULO          reduce using rule 28 (exp -> NOT exp .)
    POWER           reduce using rule 28 (exp -> NOT exp .)
    LE              reduce using rule 28 (exp -> NOT exp .)
    GE              reduce using rule 28 (exp -> NOT exp .)
    ISEQUAL         reduce using rule 28 (exp -> NOT exp .)
    NOTEQUAL        reduce using rule 28 (exp -> NOT exp .)
    LT              reduce using rule 28 (exp -> NOT exp .)
    GT              reduce using rule 28 (exp -> NOT exp .)
    AND             reduce using rule 28 (exp -> NOT exp .)
    OR              reduce using rule 28 (exp -> NOT exp .)
    SEMICOLON       reduce using rule 28 (exp -> NOT exp .)
    $end            reduce using rule 28 (exp -> NOT exp .)
    RPARAN          reduce using rule 28 (exp -> NOT exp .)
    COMMA           reduce using rule 28 (exp -> NOT exp .)

  ! PLUS            [ shift and go to state 17 ]
  ! MINUS           [ shift and go to state 18 ]
  ! MULTIPLY        [ shift and go to state 19 ]
  ! DIVIDE          [ shift and go to state 20 ]
  ! MODULO          [ shift and go to state 21 ]
  ! POWER           [ shift and go to state 22 ]
  ! LE              [ shift and go to state 23 ]
  ! GE              [ shift and go to state 24 ]
  ! ISEQUAL         [ shift and go to state 25 ]
  ! NOTEQUAL        [ shift and go to state 26 ]
  ! LT              [ shift and go to state 27 ]
  ! GT              [ shift and go to state 28 ]
  ! AND             [ shift and go to state 29 ]
  ! OR              [ shift and go to state 30 ]


state 40

    (3) stmts -> stmt SEMICOLON stmts .

    $end            reduce using rule 3 (stmts -> stmt SEMICOLON stmts .)


state 41

    (13) exp -> exp PLUS exp .
    (13) exp -> exp . PLUS exp
    (14) exp -> exp . MINUS exp
    (15) exp -> exp . MULTIPLY exp
    (16) exp -> exp . DIVIDE exp
    (17) exp -> exp . MODULO exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . LE exp
    (20) exp -> exp . GE exp
    (21) exp -> exp . ISEQUAL exp
    (22) exp -> exp . NOTEQUAL exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GT exp
    (25) exp -> exp . AND exp
    (26) exp -> exp . OR exp

    PLUS            reduce using rule 13 (exp -> exp PLUS exp .)
    MINUS           reduce using rule 13 (exp -> exp PLUS exp .)
    MODULO          reduce using rule 13 (exp -> exp PLUS exp .)
    LE              reduce using rule 13 (exp -> exp PLUS exp .)
    GE              reduce using rule 13 (exp -> exp PLUS exp .)
    ISEQUAL         reduce using rule 13 (exp -> exp PLUS exp .)
    NOTEQUAL        reduce using rule 13 (exp -> exp PLUS exp .)
    LT              reduce using rule 13 (exp -> exp PLUS exp .)
    GT              reduce using rule 13 (exp -> exp PLUS exp .)
    AND             reduce using rule 13 (exp -> exp PLUS exp .)
    OR              reduce using rule 13 (exp -> exp PLUS exp .)
    SEMICOLON       reduce using rule 13 (exp -> exp PLUS exp .)
    $end            reduce using rule 13 (exp -> exp PLUS exp .)
    RPARAN          reduce using rule 13 (exp -> exp PLUS exp .)
    COMMA           reduce using rule 13 (exp -> exp PLUS exp .)
    MULTIPLY        shift and go to state 19
    DIVIDE          shift and go to state 20
    POWER           shift and go to state 22

  ! MULTIPLY        [ reduce using rule 13 (exp -> exp PLUS exp .) ]
  ! DIVIDE          [ reduce using rule 13 (exp -> exp PLUS exp .) ]
  ! POWER           [ reduce using rule 13 (exp -> exp PLUS exp .) ]
  ! PLUS            [ shift and go to state 17 ]
  ! MINUS           [ shift and go to state 18 ]
  ! MODULO          [ shift and go to state 21 ]
  ! LE              [ shift and go to state 23 ]
  ! GE              [ shift and go to state 24 ]
  ! ISEQUAL         [ shift and go to state 25 ]
  ! NOTEQUAL        [ shift and go to state 26 ]
  ! LT              [ shift and go to state 27 ]
  ! GT              [ shift and go to state 28 ]
  ! AND             [ shift and go to state 29 ]
  ! OR              [ shift and go to state 30 ]


state 42

    (14) exp -> exp MINUS exp .
    (13) exp -> exp . PLUS exp
    (14) exp -> exp . MINUS exp
    (15) exp -> exp . MULTIPLY exp
    (16) exp -> exp . DIVIDE exp
    (17) exp -> exp . MODULO exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . LE exp
    (20) exp -> exp . GE exp
    (21) exp -> exp . ISEQUAL exp
    (22) exp -> exp . NOTEQUAL exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GT exp
    (25) exp -> exp . AND exp
    (26) exp -> exp . OR exp

    PLUS            reduce using rule 14 (exp -> exp MINUS exp .)
    MINUS           reduce using rule 14 (exp -> exp MINUS exp .)
    MODULO          reduce using rule 14 (exp -> exp MINUS exp .)
    LE              reduce using rule 14 (exp -> exp MINUS exp .)
    GE              reduce using rule 14 (exp -> exp MINUS exp .)
    ISEQUAL         reduce using rule 14 (exp -> exp MINUS exp .)
    NOTEQUAL        reduce using rule 14 (exp -> exp MINUS exp .)
    LT              reduce using rule 14 (exp -> exp MINUS exp .)
    GT              reduce using rule 14 (exp -> exp MINUS exp .)
    AND             reduce using rule 14 (exp -> exp MINUS exp .)
    OR              reduce using rule 14 (exp -> exp MINUS exp .)
    SEMICOLON       reduce using rule 14 (exp -> exp MINUS exp .)
    $end            reduce using rule 14 (exp -> exp MINUS exp .)
    RPARAN          reduce using rule 14 (exp -> exp MINUS exp .)
    COMMA           reduce using rule 14 (exp -> exp MINUS exp .)
    MULTIPLY        shift and go to state 19
    DIVIDE          shift and go to state 20
    POWER           shift and go to state 22

  ! MULTIPLY        [ reduce using rule 14 (exp -> exp MINUS exp .) ]
  ! DIVIDE          [ reduce using rule 14 (exp -> exp MINUS exp .) ]
  ! POWER           [ reduce using rule 14 (exp -> exp MINUS exp .) ]
  ! PLUS            [ shift and go to state 17 ]
  ! MINUS           [ shift and go to state 18 ]
  ! MODULO          [ shift and go to state 21 ]
  ! LE              [ shift and go to state 23 ]
  ! GE              [ shift and go to state 24 ]
  ! ISEQUAL         [ shift and go to state 25 ]
  ! NOTEQUAL        [ shift and go to state 26 ]
  ! LT              [ shift and go to state 27 ]
  ! GT              [ shift and go to state 28 ]
  ! AND             [ shift and go to state 29 ]
  ! OR              [ shift and go to state 30 ]


state 43

    (15) exp -> exp MULTIPLY exp .
    (13) exp -> exp . PLUS exp
    (14) exp -> exp . MINUS exp
    (15) exp -> exp . MULTIPLY exp
    (16) exp -> exp . DIVIDE exp
    (17) exp -> exp . MODULO exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . LE exp
    (20) exp -> exp . GE exp
    (21) exp -> exp . ISEQUAL exp
    (22) exp -> exp . NOTEQUAL exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GT exp
    (25) exp -> exp . AND exp
    (26) exp -> exp . OR exp

    PLUS            reduce using rule 15 (exp -> exp MULTIPLY exp .)
    MINUS           reduce using rule 15 (exp -> exp MULTIPLY exp .)
    MULTIPLY        reduce using rule 15 (exp -> exp MULTIPLY exp .)
    DIVIDE          reduce using rule 15 (exp -> exp MULTIPLY exp .)
    MODULO          reduce using rule 15 (exp -> exp MULTIPLY exp .)
    LE              reduce using rule 15 (exp -> exp MULTIPLY exp .)
    GE              reduce using rule 15 (exp -> exp MULTIPLY exp .)
    ISEQUAL         reduce using rule 15 (exp -> exp MULTIPLY exp .)
    NOTEQUAL        reduce using rule 15 (exp -> exp MULTIPLY exp .)
    LT              reduce using rule 15 (exp -> exp MULTIPLY exp .)
    GT              reduce using rule 15 (exp -> exp MULTIPLY exp .)
    AND             reduce using rule 15 (exp -> exp MULTIPLY exp .)
    OR              reduce using rule 15 (exp -> exp MULTIPLY exp .)
    SEMICOLON       reduce using rule 15 (exp -> exp MULTIPLY exp .)
    $end            reduce using rule 15 (exp -> exp MULTIPLY exp .)
    RPARAN          reduce using rule 15 (exp -> exp MULTIPLY exp .)
    COMMA           reduce using rule 15 (exp -> exp MULTIPLY exp .)
    POWER           shift and go to state 22

  ! POWER           [ reduce using rule 15 (exp -> exp MULTIPLY exp .) ]
  ! PLUS            [ shift and go to state 17 ]
  ! MINUS           [ shift and go to state 18 ]
  ! MULTIPLY        [ shift and go to state 19 ]
  ! DIVIDE          [ shift and go to state 20 ]
  ! MODULO          [ shift and go to state 21 ]
  ! LE              [ shift and go to state 23 ]
  ! GE              [ shift and go to state 24 ]
  ! ISEQUAL         [ shift and go to state 25 ]
  ! NOTEQUAL        [ shift and go to state 26 ]
  ! LT              [ shift and go to state 27 ]
  ! GT              [ shift and go to state 28 ]
  ! AND             [ shift and go to state 29 ]
  ! OR              [ shift and go to state 30 ]


state 44

    (16) exp -> exp DIVIDE exp .
    (13) exp -> exp . PLUS exp
    (14) exp -> exp . MINUS exp
    (15) exp -> exp . MULTIPLY exp
    (16) exp -> exp . DIVIDE exp
    (17) exp -> exp . MODULO exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . LE exp
    (20) exp -> exp . GE exp
    (21) exp -> exp . ISEQUAL exp
    (22) exp -> exp . NOTEQUAL exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GT exp
    (25) exp -> exp . AND exp
    (26) exp -> exp . OR exp

    PLUS            reduce using rule 16 (exp -> exp DIVIDE exp .)
    MINUS           reduce using rule 16 (exp -> exp DIVIDE exp .)
    MULTIPLY        reduce using rule 16 (exp -> exp DIVIDE exp .)
    DIVIDE          reduce using rule 16 (exp -> exp DIVIDE exp .)
    MODULO          reduce using rule 16 (exp -> exp DIVIDE exp .)
    LE              reduce using rule 16 (exp -> exp DIVIDE exp .)
    GE              reduce using rule 16 (exp -> exp DIVIDE exp .)
    ISEQUAL         reduce using rule 16 (exp -> exp DIVIDE exp .)
    NOTEQUAL        reduce using rule 16 (exp -> exp DIVIDE exp .)
    LT              reduce using rule 16 (exp -> exp DIVIDE exp .)
    GT              reduce using rule 16 (exp -> exp DIVIDE exp .)
    AND             reduce using rule 16 (exp -> exp DIVIDE exp .)
    OR              reduce using rule 16 (exp -> exp DIVIDE exp .)
    SEMICOLON       reduce using rule 16 (exp -> exp DIVIDE exp .)
    $end            reduce using rule 16 (exp -> exp DIVIDE exp .)
    RPARAN          reduce using rule 16 (exp -> exp DIVIDE exp .)
    COMMA           reduce using rule 16 (exp -> exp DIVIDE exp .)
    POWER           shift and go to state 22

  ! POWER           [ reduce using rule 16 (exp -> exp DIVIDE exp .) ]
  ! PLUS            [ shift and go to state 17 ]
  ! MINUS           [ shift and go to state 18 ]
  ! MULTIPLY        [ shift and go to state 19 ]
  ! DIVIDE          [ shift and go to state 20 ]
  ! MODULO          [ shift and go to state 21 ]
  ! LE              [ shift and go to state 23 ]
  ! GE              [ shift and go to state 24 ]
  ! ISEQUAL         [ shift and go to state 25 ]
  ! NOTEQUAL        [ shift and go to state 26 ]
  ! LT              [ shift and go to state 27 ]
  ! GT              [ shift and go to state 28 ]
  ! AND             [ shift and go to state 29 ]
  ! OR              [ shift and go to state 30 ]


state 45

    (17) exp -> exp MODULO exp .
    (13) exp -> exp . PLUS exp
    (14) exp -> exp . MINUS exp
    (15) exp -> exp . MULTIPLY exp
    (16) exp -> exp . DIVIDE exp
    (17) exp -> exp . MODULO exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . LE exp
    (20) exp -> exp . GE exp
    (21) exp -> exp . ISEQUAL exp
    (22) exp -> exp . NOTEQUAL exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GT exp
    (25) exp -> exp . AND exp
    (26) exp -> exp . OR exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for ISEQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 17 (exp -> exp MODULO exp .)
    $end            reduce using rule 17 (exp -> exp MODULO exp .)
    RPARAN          reduce using rule 17 (exp -> exp MODULO exp .)
    COMMA           reduce using rule 17 (exp -> exp MODULO exp .)
    PLUS            shift and go to state 17
    MINUS           shift and go to state 18
    MULTIPLY        shift and go to state 19
    DIVIDE          shift and go to state 20
    MODULO          shift and go to state 21
    POWER           shift and go to state 22
    LE              shift and go to state 23
    GE              shift and go to state 24
    ISEQUAL         shift and go to state 25
    NOTEQUAL        shift and go to state 26
    LT              shift and go to state 27
    GT              shift and go to state 28
    AND             shift and go to state 29
    OR              shift and go to state 30

  ! PLUS            [ reduce using rule 17 (exp -> exp MODULO exp .) ]
  ! MINUS           [ reduce using rule 17 (exp -> exp MODULO exp .) ]
  ! MULTIPLY        [ reduce using rule 17 (exp -> exp MODULO exp .) ]
  ! DIVIDE          [ reduce using rule 17 (exp -> exp MODULO exp .) ]
  ! MODULO          [ reduce using rule 17 (exp -> exp MODULO exp .) ]
  ! POWER           [ reduce using rule 17 (exp -> exp MODULO exp .) ]
  ! LE              [ reduce using rule 17 (exp -> exp MODULO exp .) ]
  ! GE              [ reduce using rule 17 (exp -> exp MODULO exp .) ]
  ! ISEQUAL         [ reduce using rule 17 (exp -> exp MODULO exp .) ]
  ! NOTEQUAL        [ reduce using rule 17 (exp -> exp MODULO exp .) ]
  ! LT              [ reduce using rule 17 (exp -> exp MODULO exp .) ]
  ! GT              [ reduce using rule 17 (exp -> exp MODULO exp .) ]
  ! AND             [ reduce using rule 17 (exp -> exp MODULO exp .) ]
  ! OR              [ reduce using rule 17 (exp -> exp MODULO exp .) ]


state 46

    (18) exp -> exp POWER exp .
    (13) exp -> exp . PLUS exp
    (14) exp -> exp . MINUS exp
    (15) exp -> exp . MULTIPLY exp
    (16) exp -> exp . DIVIDE exp
    (17) exp -> exp . MODULO exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . LE exp
    (20) exp -> exp . GE exp
    (21) exp -> exp . ISEQUAL exp
    (22) exp -> exp . NOTEQUAL exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GT exp
    (25) exp -> exp . AND exp
    (26) exp -> exp . OR exp

    PLUS            reduce using rule 18 (exp -> exp POWER exp .)
    MINUS           reduce using rule 18 (exp -> exp POWER exp .)
    MULTIPLY        reduce using rule 18 (exp -> exp POWER exp .)
    DIVIDE          reduce using rule 18 (exp -> exp POWER exp .)
    MODULO          reduce using rule 18 (exp -> exp POWER exp .)
    POWER           reduce using rule 18 (exp -> exp POWER exp .)
    LE              reduce using rule 18 (exp -> exp POWER exp .)
    GE              reduce using rule 18 (exp -> exp POWER exp .)
    ISEQUAL         reduce using rule 18 (exp -> exp POWER exp .)
    NOTEQUAL        reduce using rule 18 (exp -> exp POWER exp .)
    LT              reduce using rule 18 (exp -> exp POWER exp .)
    GT              reduce using rule 18 (exp -> exp POWER exp .)
    AND             reduce using rule 18 (exp -> exp POWER exp .)
    OR              reduce using rule 18 (exp -> exp POWER exp .)
    SEMICOLON       reduce using rule 18 (exp -> exp POWER exp .)
    $end            reduce using rule 18 (exp -> exp POWER exp .)
    RPARAN          reduce using rule 18 (exp -> exp POWER exp .)
    COMMA           reduce using rule 18 (exp -> exp POWER exp .)

  ! PLUS            [ shift and go to state 17 ]
  ! MINUS           [ shift and go to state 18 ]
  ! MULTIPLY        [ shift and go to state 19 ]
  ! DIVIDE          [ shift and go to state 20 ]
  ! MODULO          [ shift and go to state 21 ]
  ! POWER           [ shift and go to state 22 ]
  ! LE              [ shift and go to state 23 ]
  ! GE              [ shift and go to state 24 ]
  ! ISEQUAL         [ shift and go to state 25 ]
  ! NOTEQUAL        [ shift and go to state 26 ]
  ! LT              [ shift and go to state 27 ]
  ! GT              [ shift and go to state 28 ]
  ! AND             [ shift and go to state 29 ]
  ! OR              [ shift and go to state 30 ]


state 47

    (19) exp -> exp LE exp .
    (13) exp -> exp . PLUS exp
    (14) exp -> exp . MINUS exp
    (15) exp -> exp . MULTIPLY exp
    (16) exp -> exp . DIVIDE exp
    (17) exp -> exp . MODULO exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . LE exp
    (20) exp -> exp . GE exp
    (21) exp -> exp . ISEQUAL exp
    (22) exp -> exp . NOTEQUAL exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GT exp
    (25) exp -> exp . AND exp
    (26) exp -> exp . OR exp

    MODULO          reduce using rule 19 (exp -> exp LE exp .)
    LE              reduce using rule 19 (exp -> exp LE exp .)
    GE              reduce using rule 19 (exp -> exp LE exp .)
    ISEQUAL         reduce using rule 19 (exp -> exp LE exp .)
    NOTEQUAL        reduce using rule 19 (exp -> exp LE exp .)
    LT              reduce using rule 19 (exp -> exp LE exp .)
    GT              reduce using rule 19 (exp -> exp LE exp .)
    AND             reduce using rule 19 (exp -> exp LE exp .)
    OR              reduce using rule 19 (exp -> exp LE exp .)
    SEMICOLON       reduce using rule 19 (exp -> exp LE exp .)
    $end            reduce using rule 19 (exp -> exp LE exp .)
    RPARAN          reduce using rule 19 (exp -> exp LE exp .)
    COMMA           reduce using rule 19 (exp -> exp LE exp .)
    PLUS            shift and go to state 17
    MINUS           shift and go to state 18
    MULTIPLY        shift and go to state 19
    DIVIDE          shift and go to state 20
    POWER           shift and go to state 22

  ! PLUS            [ reduce using rule 19 (exp -> exp LE exp .) ]
  ! MINUS           [ reduce using rule 19 (exp -> exp LE exp .) ]
  ! MULTIPLY        [ reduce using rule 19 (exp -> exp LE exp .) ]
  ! DIVIDE          [ reduce using rule 19 (exp -> exp LE exp .) ]
  ! POWER           [ reduce using rule 19 (exp -> exp LE exp .) ]
  ! MODULO          [ shift and go to state 21 ]
  ! LE              [ shift and go to state 23 ]
  ! GE              [ shift and go to state 24 ]
  ! ISEQUAL         [ shift and go to state 25 ]
  ! NOTEQUAL        [ shift and go to state 26 ]
  ! LT              [ shift and go to state 27 ]
  ! GT              [ shift and go to state 28 ]
  ! AND             [ shift and go to state 29 ]
  ! OR              [ shift and go to state 30 ]


state 48

    (20) exp -> exp GE exp .
    (13) exp -> exp . PLUS exp
    (14) exp -> exp . MINUS exp
    (15) exp -> exp . MULTIPLY exp
    (16) exp -> exp . DIVIDE exp
    (17) exp -> exp . MODULO exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . LE exp
    (20) exp -> exp . GE exp
    (21) exp -> exp . ISEQUAL exp
    (22) exp -> exp . NOTEQUAL exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GT exp
    (25) exp -> exp . AND exp
    (26) exp -> exp . OR exp

    MODULO          reduce using rule 20 (exp -> exp GE exp .)
    LE              reduce using rule 20 (exp -> exp GE exp .)
    GE              reduce using rule 20 (exp -> exp GE exp .)
    ISEQUAL         reduce using rule 20 (exp -> exp GE exp .)
    NOTEQUAL        reduce using rule 20 (exp -> exp GE exp .)
    LT              reduce using rule 20 (exp -> exp GE exp .)
    GT              reduce using rule 20 (exp -> exp GE exp .)
    AND             reduce using rule 20 (exp -> exp GE exp .)
    OR              reduce using rule 20 (exp -> exp GE exp .)
    SEMICOLON       reduce using rule 20 (exp -> exp GE exp .)
    $end            reduce using rule 20 (exp -> exp GE exp .)
    RPARAN          reduce using rule 20 (exp -> exp GE exp .)
    COMMA           reduce using rule 20 (exp -> exp GE exp .)
    PLUS            shift and go to state 17
    MINUS           shift and go to state 18
    MULTIPLY        shift and go to state 19
    DIVIDE          shift and go to state 20
    POWER           shift and go to state 22

  ! PLUS            [ reduce using rule 20 (exp -> exp GE exp .) ]
  ! MINUS           [ reduce using rule 20 (exp -> exp GE exp .) ]
  ! MULTIPLY        [ reduce using rule 20 (exp -> exp GE exp .) ]
  ! DIVIDE          [ reduce using rule 20 (exp -> exp GE exp .) ]
  ! POWER           [ reduce using rule 20 (exp -> exp GE exp .) ]
  ! MODULO          [ shift and go to state 21 ]
  ! LE              [ shift and go to state 23 ]
  ! GE              [ shift and go to state 24 ]
  ! ISEQUAL         [ shift and go to state 25 ]
  ! NOTEQUAL        [ shift and go to state 26 ]
  ! LT              [ shift and go to state 27 ]
  ! GT              [ shift and go to state 28 ]
  ! AND             [ shift and go to state 29 ]
  ! OR              [ shift and go to state 30 ]


state 49

    (21) exp -> exp ISEQUAL exp .
    (13) exp -> exp . PLUS exp
    (14) exp -> exp . MINUS exp
    (15) exp -> exp . MULTIPLY exp
    (16) exp -> exp . DIVIDE exp
    (17) exp -> exp . MODULO exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . LE exp
    (20) exp -> exp . GE exp
    (21) exp -> exp . ISEQUAL exp
    (22) exp -> exp . NOTEQUAL exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GT exp
    (25) exp -> exp . AND exp
    (26) exp -> exp . OR exp

    MODULO          reduce using rule 21 (exp -> exp ISEQUAL exp .)
    ISEQUAL         reduce using rule 21 (exp -> exp ISEQUAL exp .)
    NOTEQUAL        reduce using rule 21 (exp -> exp ISEQUAL exp .)
    AND             reduce using rule 21 (exp -> exp ISEQUAL exp .)
    OR              reduce using rule 21 (exp -> exp ISEQUAL exp .)
    SEMICOLON       reduce using rule 21 (exp -> exp ISEQUAL exp .)
    $end            reduce using rule 21 (exp -> exp ISEQUAL exp .)
    RPARAN          reduce using rule 21 (exp -> exp ISEQUAL exp .)
    COMMA           reduce using rule 21 (exp -> exp ISEQUAL exp .)
    PLUS            shift and go to state 17
    MINUS           shift and go to state 18
    MULTIPLY        shift and go to state 19
    DIVIDE          shift and go to state 20
    POWER           shift and go to state 22
    LE              shift and go to state 23
    GE              shift and go to state 24
    LT              shift and go to state 27
    GT              shift and go to state 28

  ! PLUS            [ reduce using rule 21 (exp -> exp ISEQUAL exp .) ]
  ! MINUS           [ reduce using rule 21 (exp -> exp ISEQUAL exp .) ]
  ! MULTIPLY        [ reduce using rule 21 (exp -> exp ISEQUAL exp .) ]
  ! DIVIDE          [ reduce using rule 21 (exp -> exp ISEQUAL exp .) ]
  ! POWER           [ reduce using rule 21 (exp -> exp ISEQUAL exp .) ]
  ! LE              [ reduce using rule 21 (exp -> exp ISEQUAL exp .) ]
  ! GE              [ reduce using rule 21 (exp -> exp ISEQUAL exp .) ]
  ! LT              [ reduce using rule 21 (exp -> exp ISEQUAL exp .) ]
  ! GT              [ reduce using rule 21 (exp -> exp ISEQUAL exp .) ]
  ! MODULO          [ shift and go to state 21 ]
  ! ISEQUAL         [ shift and go to state 25 ]
  ! NOTEQUAL        [ shift and go to state 26 ]
  ! AND             [ shift and go to state 29 ]
  ! OR              [ shift and go to state 30 ]


state 50

    (22) exp -> exp NOTEQUAL exp .
    (13) exp -> exp . PLUS exp
    (14) exp -> exp . MINUS exp
    (15) exp -> exp . MULTIPLY exp
    (16) exp -> exp . DIVIDE exp
    (17) exp -> exp . MODULO exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . LE exp
    (20) exp -> exp . GE exp
    (21) exp -> exp . ISEQUAL exp
    (22) exp -> exp . NOTEQUAL exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GT exp
    (25) exp -> exp . AND exp
    (26) exp -> exp . OR exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for ISEQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 22 (exp -> exp NOTEQUAL exp .)
    $end            reduce using rule 22 (exp -> exp NOTEQUAL exp .)
    RPARAN          reduce using rule 22 (exp -> exp NOTEQUAL exp .)
    COMMA           reduce using rule 22 (exp -> exp NOTEQUAL exp .)
    PLUS            shift and go to state 17
    MINUS           shift and go to state 18
    MULTIPLY        shift and go to state 19
    DIVIDE          shift and go to state 20
    MODULO          shift and go to state 21
    POWER           shift and go to state 22
    LE              shift and go to state 23
    GE              shift and go to state 24
    ISEQUAL         shift and go to state 25
    NOTEQUAL        shift and go to state 26
    LT              shift and go to state 27
    GT              shift and go to state 28
    AND             shift and go to state 29
    OR              shift and go to state 30

  ! PLUS            [ reduce using rule 22 (exp -> exp NOTEQUAL exp .) ]
  ! MINUS           [ reduce using rule 22 (exp -> exp NOTEQUAL exp .) ]
  ! MULTIPLY        [ reduce using rule 22 (exp -> exp NOTEQUAL exp .) ]
  ! DIVIDE          [ reduce using rule 22 (exp -> exp NOTEQUAL exp .) ]
  ! MODULO          [ reduce using rule 22 (exp -> exp NOTEQUAL exp .) ]
  ! POWER           [ reduce using rule 22 (exp -> exp NOTEQUAL exp .) ]
  ! LE              [ reduce using rule 22 (exp -> exp NOTEQUAL exp .) ]
  ! GE              [ reduce using rule 22 (exp -> exp NOTEQUAL exp .) ]
  ! ISEQUAL         [ reduce using rule 22 (exp -> exp NOTEQUAL exp .) ]
  ! NOTEQUAL        [ reduce using rule 22 (exp -> exp NOTEQUAL exp .) ]
  ! LT              [ reduce using rule 22 (exp -> exp NOTEQUAL exp .) ]
  ! GT              [ reduce using rule 22 (exp -> exp NOTEQUAL exp .) ]
  ! AND             [ reduce using rule 22 (exp -> exp NOTEQUAL exp .) ]
  ! OR              [ reduce using rule 22 (exp -> exp NOTEQUAL exp .) ]


state 51

    (23) exp -> exp LT exp .
    (13) exp -> exp . PLUS exp
    (14) exp -> exp . MINUS exp
    (15) exp -> exp . MULTIPLY exp
    (16) exp -> exp . DIVIDE exp
    (17) exp -> exp . MODULO exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . LE exp
    (20) exp -> exp . GE exp
    (21) exp -> exp . ISEQUAL exp
    (22) exp -> exp . NOTEQUAL exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GT exp
    (25) exp -> exp . AND exp
    (26) exp -> exp . OR exp

    MODULO          reduce using rule 23 (exp -> exp LT exp .)
    LE              reduce using rule 23 (exp -> exp LT exp .)
    GE              reduce using rule 23 (exp -> exp LT exp .)
    ISEQUAL         reduce using rule 23 (exp -> exp LT exp .)
    NOTEQUAL        reduce using rule 23 (exp -> exp LT exp .)
    LT              reduce using rule 23 (exp -> exp LT exp .)
    GT              reduce using rule 23 (exp -> exp LT exp .)
    AND             reduce using rule 23 (exp -> exp LT exp .)
    OR              reduce using rule 23 (exp -> exp LT exp .)
    SEMICOLON       reduce using rule 23 (exp -> exp LT exp .)
    $end            reduce using rule 23 (exp -> exp LT exp .)
    RPARAN          reduce using rule 23 (exp -> exp LT exp .)
    COMMA           reduce using rule 23 (exp -> exp LT exp .)
    PLUS            shift and go to state 17
    MINUS           shift and go to state 18
    MULTIPLY        shift and go to state 19
    DIVIDE          shift and go to state 20
    POWER           shift and go to state 22

  ! PLUS            [ reduce using rule 23 (exp -> exp LT exp .) ]
  ! MINUS           [ reduce using rule 23 (exp -> exp LT exp .) ]
  ! MULTIPLY        [ reduce using rule 23 (exp -> exp LT exp .) ]
  ! DIVIDE          [ reduce using rule 23 (exp -> exp LT exp .) ]
  ! POWER           [ reduce using rule 23 (exp -> exp LT exp .) ]
  ! MODULO          [ shift and go to state 21 ]
  ! LE              [ shift and go to state 23 ]
  ! GE              [ shift and go to state 24 ]
  ! ISEQUAL         [ shift and go to state 25 ]
  ! NOTEQUAL        [ shift and go to state 26 ]
  ! LT              [ shift and go to state 27 ]
  ! GT              [ shift and go to state 28 ]
  ! AND             [ shift and go to state 29 ]
  ! OR              [ shift and go to state 30 ]


state 52

    (24) exp -> exp GT exp .
    (13) exp -> exp . PLUS exp
    (14) exp -> exp . MINUS exp
    (15) exp -> exp . MULTIPLY exp
    (16) exp -> exp . DIVIDE exp
    (17) exp -> exp . MODULO exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . LE exp
    (20) exp -> exp . GE exp
    (21) exp -> exp . ISEQUAL exp
    (22) exp -> exp . NOTEQUAL exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GT exp
    (25) exp -> exp . AND exp
    (26) exp -> exp . OR exp

    MODULO          reduce using rule 24 (exp -> exp GT exp .)
    LE              reduce using rule 24 (exp -> exp GT exp .)
    GE              reduce using rule 24 (exp -> exp GT exp .)
    ISEQUAL         reduce using rule 24 (exp -> exp GT exp .)
    NOTEQUAL        reduce using rule 24 (exp -> exp GT exp .)
    LT              reduce using rule 24 (exp -> exp GT exp .)
    GT              reduce using rule 24 (exp -> exp GT exp .)
    AND             reduce using rule 24 (exp -> exp GT exp .)
    OR              reduce using rule 24 (exp -> exp GT exp .)
    SEMICOLON       reduce using rule 24 (exp -> exp GT exp .)
    $end            reduce using rule 24 (exp -> exp GT exp .)
    RPARAN          reduce using rule 24 (exp -> exp GT exp .)
    COMMA           reduce using rule 24 (exp -> exp GT exp .)
    PLUS            shift and go to state 17
    MINUS           shift and go to state 18
    MULTIPLY        shift and go to state 19
    DIVIDE          shift and go to state 20
    POWER           shift and go to state 22

  ! PLUS            [ reduce using rule 24 (exp -> exp GT exp .) ]
  ! MINUS           [ reduce using rule 24 (exp -> exp GT exp .) ]
  ! MULTIPLY        [ reduce using rule 24 (exp -> exp GT exp .) ]
  ! DIVIDE          [ reduce using rule 24 (exp -> exp GT exp .) ]
  ! POWER           [ reduce using rule 24 (exp -> exp GT exp .) ]
  ! MODULO          [ shift and go to state 21 ]
  ! LE              [ shift and go to state 23 ]
  ! GE              [ shift and go to state 24 ]
  ! ISEQUAL         [ shift and go to state 25 ]
  ! NOTEQUAL        [ shift and go to state 26 ]
  ! LT              [ shift and go to state 27 ]
  ! GT              [ shift and go to state 28 ]
  ! AND             [ shift and go to state 29 ]
  ! OR              [ shift and go to state 30 ]


state 53

    (25) exp -> exp AND exp .
    (13) exp -> exp . PLUS exp
    (14) exp -> exp . MINUS exp
    (15) exp -> exp . MULTIPLY exp
    (16) exp -> exp . DIVIDE exp
    (17) exp -> exp . MODULO exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . LE exp
    (20) exp -> exp . GE exp
    (21) exp -> exp . ISEQUAL exp
    (22) exp -> exp . NOTEQUAL exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GT exp
    (25) exp -> exp . AND exp
    (26) exp -> exp . OR exp

    MODULO          reduce using rule 25 (exp -> exp AND exp .)
    NOTEQUAL        reduce using rule 25 (exp -> exp AND exp .)
    AND             reduce using rule 25 (exp -> exp AND exp .)
    OR              reduce using rule 25 (exp -> exp AND exp .)
    SEMICOLON       reduce using rule 25 (exp -> exp AND exp .)
    $end            reduce using rule 25 (exp -> exp AND exp .)
    RPARAN          reduce using rule 25 (exp -> exp AND exp .)
    COMMA           reduce using rule 25 (exp -> exp AND exp .)
    PLUS            shift and go to state 17
    MINUS           shift and go to state 18
    MULTIPLY        shift and go to state 19
    DIVIDE          shift and go to state 20
    POWER           shift and go to state 22
    LE              shift and go to state 23
    GE              shift and go to state 24
    ISEQUAL         shift and go to state 25
    LT              shift and go to state 27
    GT              shift and go to state 28

  ! PLUS            [ reduce using rule 25 (exp -> exp AND exp .) ]
  ! MINUS           [ reduce using rule 25 (exp -> exp AND exp .) ]
  ! MULTIPLY        [ reduce using rule 25 (exp -> exp AND exp .) ]
  ! DIVIDE          [ reduce using rule 25 (exp -> exp AND exp .) ]
  ! POWER           [ reduce using rule 25 (exp -> exp AND exp .) ]
  ! LE              [ reduce using rule 25 (exp -> exp AND exp .) ]
  ! GE              [ reduce using rule 25 (exp -> exp AND exp .) ]
  ! ISEQUAL         [ reduce using rule 25 (exp -> exp AND exp .) ]
  ! LT              [ reduce using rule 25 (exp -> exp AND exp .) ]
  ! GT              [ reduce using rule 25 (exp -> exp AND exp .) ]
  ! MODULO          [ shift and go to state 21 ]
  ! NOTEQUAL        [ shift and go to state 26 ]
  ! AND             [ shift and go to state 29 ]
  ! OR              [ shift and go to state 30 ]


state 54

    (26) exp -> exp OR exp .
    (13) exp -> exp . PLUS exp
    (14) exp -> exp . MINUS exp
    (15) exp -> exp . MULTIPLY exp
    (16) exp -> exp . DIVIDE exp
    (17) exp -> exp . MODULO exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . LE exp
    (20) exp -> exp . GE exp
    (21) exp -> exp . ISEQUAL exp
    (22) exp -> exp . NOTEQUAL exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GT exp
    (25) exp -> exp . AND exp
    (26) exp -> exp . OR exp

    MODULO          reduce using rule 26 (exp -> exp OR exp .)
    NOTEQUAL        reduce using rule 26 (exp -> exp OR exp .)
    OR              reduce using rule 26 (exp -> exp OR exp .)
    SEMICOLON       reduce using rule 26 (exp -> exp OR exp .)
    $end            reduce using rule 26 (exp -> exp OR exp .)
    RPARAN          reduce using rule 26 (exp -> exp OR exp .)
    COMMA           reduce using rule 26 (exp -> exp OR exp .)
    PLUS            shift and go to state 17
    MINUS           shift and go to state 18
    MULTIPLY        shift and go to state 19
    DIVIDE          shift and go to state 20
    POWER           shift and go to state 22
    LE              shift and go to state 23
    GE              shift and go to state 24
    ISEQUAL         shift and go to state 25
    LT              shift and go to state 27
    GT              shift and go to state 28
    AND             shift and go to state 29

  ! PLUS            [ reduce using rule 26 (exp -> exp OR exp .) ]
  ! MINUS           [ reduce using rule 26 (exp -> exp OR exp .) ]
  ! MULTIPLY        [ reduce using rule 26 (exp -> exp OR exp .) ]
  ! DIVIDE          [ reduce using rule 26 (exp -> exp OR exp .) ]
  ! POWER           [ reduce using rule 26 (exp -> exp OR exp .) ]
  ! LE              [ reduce using rule 26 (exp -> exp OR exp .) ]
  ! GE              [ reduce using rule 26 (exp -> exp OR exp .) ]
  ! ISEQUAL         [ reduce using rule 26 (exp -> exp OR exp .) ]
  ! LT              [ reduce using rule 26 (exp -> exp OR exp .) ]
  ! GT              [ reduce using rule 26 (exp -> exp OR exp .) ]
  ! AND             [ reduce using rule 26 (exp -> exp OR exp .) ]
  ! MODULO          [ shift and go to state 21 ]
  ! NOTEQUAL        [ shift and go to state 26 ]
  ! OR              [ shift and go to state 30 ]


state 55

    (5) stmt -> VARTYPE IDENTIFIER EQUAL . exp
    (12) exp -> . MINUS IDENTIFIER
    (13) exp -> . exp PLUS exp
    (14) exp -> . exp MINUS exp
    (15) exp -> . exp MULTIPLY exp
    (16) exp -> . exp DIVIDE exp
    (17) exp -> . exp MODULO exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp LE exp
    (20) exp -> . exp GE exp
    (21) exp -> . exp ISEQUAL exp
    (22) exp -> . exp NOTEQUAL exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GT exp
    (25) exp -> . exp AND exp
    (26) exp -> . exp OR exp
    (27) exp -> . LPARAN exp RPARAN
    (28) exp -> . NOT exp
    (29) exp -> . INT
    (30) exp -> . DOUBLE
    (31) exp -> . CHAR
    (32) exp -> . STRING
    (33) exp -> . BOOL
    (34) exp -> . IDENTIFIER

    MINUS           shift and go to state 9
    LPARAN          shift and go to state 8
    NOT             shift and go to state 10
    INT             shift and go to state 11
    DOUBLE          shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    IDENTIFIER      shift and go to state 37

    exp                            shift and go to state 60

state 56

    (6) stmt -> IDENTIFIER EQUAL exp .
    (13) exp -> exp . PLUS exp
    (14) exp -> exp . MINUS exp
    (15) exp -> exp . MULTIPLY exp
    (16) exp -> exp . DIVIDE exp
    (17) exp -> exp . MODULO exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . LE exp
    (20) exp -> exp . GE exp
    (21) exp -> exp . ISEQUAL exp
    (22) exp -> exp . NOTEQUAL exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GT exp
    (25) exp -> exp . AND exp
    (26) exp -> exp . OR exp

    SEMICOLON       reduce using rule 6 (stmt -> IDENTIFIER EQUAL exp .)
    $end            reduce using rule 6 (stmt -> IDENTIFIER EQUAL exp .)
    PLUS            shift and go to state 17
    MINUS           shift and go to state 18
    MULTIPLY        shift and go to state 19
    DIVIDE          shift and go to state 20
    MODULO          shift and go to state 21
    POWER           shift and go to state 22
    LE              shift and go to state 23
    GE              shift and go to state 24
    ISEQUAL         shift and go to state 25
    NOTEQUAL        shift and go to state 26
    LT              shift and go to state 27
    GT              shift and go to state 28
    AND             shift and go to state 29
    OR              shift and go to state 30


state 57

    (7) stmt -> PRINT LPARAN exps . RPARAN

    RPARAN          shift and go to state 61


state 58

    (8) exps -> exp .
    (9) exps -> exp . COMMA exps
    (13) exp -> exp . PLUS exp
    (14) exp -> exp . MINUS exp
    (15) exp -> exp . MULTIPLY exp
    (16) exp -> exp . DIVIDE exp
    (17) exp -> exp . MODULO exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . LE exp
    (20) exp -> exp . GE exp
    (21) exp -> exp . ISEQUAL exp
    (22) exp -> exp . NOTEQUAL exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GT exp
    (25) exp -> exp . AND exp
    (26) exp -> exp . OR exp

    RPARAN          reduce using rule 8 (exps -> exp .)
    COMMA           shift and go to state 62
    PLUS            shift and go to state 17
    MINUS           shift and go to state 18
    MULTIPLY        shift and go to state 19
    DIVIDE          shift and go to state 20
    MODULO          shift and go to state 21
    POWER           shift and go to state 22
    LE              shift and go to state 23
    GE              shift and go to state 24
    ISEQUAL         shift and go to state 25
    NOTEQUAL        shift and go to state 26
    LT              shift and go to state 27
    GT              shift and go to state 28
    AND             shift and go to state 29
    OR              shift and go to state 30


state 59

    (27) exp -> LPARAN exp RPARAN .

    PLUS            reduce using rule 27 (exp -> LPARAN exp RPARAN .)
    MINUS           reduce using rule 27 (exp -> LPARAN exp RPARAN .)
    MULTIPLY        reduce using rule 27 (exp -> LPARAN exp RPARAN .)
    DIVIDE          reduce using rule 27 (exp -> LPARAN exp RPARAN .)
    MODULO          reduce using rule 27 (exp -> LPARAN exp RPARAN .)
    POWER           reduce using rule 27 (exp -> LPARAN exp RPARAN .)
    LE              reduce using rule 27 (exp -> LPARAN exp RPARAN .)
    GE              reduce using rule 27 (exp -> LPARAN exp RPARAN .)
    ISEQUAL         reduce using rule 27 (exp -> LPARAN exp RPARAN .)
    NOTEQUAL        reduce using rule 27 (exp -> LPARAN exp RPARAN .)
    LT              reduce using rule 27 (exp -> LPARAN exp RPARAN .)
    GT              reduce using rule 27 (exp -> LPARAN exp RPARAN .)
    AND             reduce using rule 27 (exp -> LPARAN exp RPARAN .)
    OR              reduce using rule 27 (exp -> LPARAN exp RPARAN .)
    SEMICOLON       reduce using rule 27 (exp -> LPARAN exp RPARAN .)
    $end            reduce using rule 27 (exp -> LPARAN exp RPARAN .)
    RPARAN          reduce using rule 27 (exp -> LPARAN exp RPARAN .)
    COMMA           reduce using rule 27 (exp -> LPARAN exp RPARAN .)


state 60

    (5) stmt -> VARTYPE IDENTIFIER EQUAL exp .
    (13) exp -> exp . PLUS exp
    (14) exp -> exp . MINUS exp
    (15) exp -> exp . MULTIPLY exp
    (16) exp -> exp . DIVIDE exp
    (17) exp -> exp . MODULO exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . LE exp
    (20) exp -> exp . GE exp
    (21) exp -> exp . ISEQUAL exp
    (22) exp -> exp . NOTEQUAL exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GT exp
    (25) exp -> exp . AND exp
    (26) exp -> exp . OR exp

    SEMICOLON       reduce using rule 5 (stmt -> VARTYPE IDENTIFIER EQUAL exp .)
    $end            reduce using rule 5 (stmt -> VARTYPE IDENTIFIER EQUAL exp .)
    PLUS            shift and go to state 17
    MINUS           shift and go to state 18
    MULTIPLY        shift and go to state 19
    DIVIDE          shift and go to state 20
    MODULO          shift and go to state 21
    POWER           shift and go to state 22
    LE              shift and go to state 23
    GE              shift and go to state 24
    ISEQUAL         shift and go to state 25
    NOTEQUAL        shift and go to state 26
    LT              shift and go to state 27
    GT              shift and go to state 28
    AND             shift and go to state 29
    OR              shift and go to state 30


state 61

    (7) stmt -> PRINT LPARAN exps RPARAN .

    SEMICOLON       reduce using rule 7 (stmt -> PRINT LPARAN exps RPARAN .)
    $end            reduce using rule 7 (stmt -> PRINT LPARAN exps RPARAN .)


state 62

    (9) exps -> exp COMMA . exps
    (8) exps -> . exp
    (9) exps -> . exp COMMA exps
    (12) exp -> . MINUS IDENTIFIER
    (13) exp -> . exp PLUS exp
    (14) exp -> . exp MINUS exp
    (15) exp -> . exp MULTIPLY exp
    (16) exp -> . exp DIVIDE exp
    (17) exp -> . exp MODULO exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp LE exp
    (20) exp -> . exp GE exp
    (21) exp -> . exp ISEQUAL exp
    (22) exp -> . exp NOTEQUAL exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GT exp
    (25) exp -> . exp AND exp
    (26) exp -> . exp OR exp
    (27) exp -> . LPARAN exp RPARAN
    (28) exp -> . NOT exp
    (29) exp -> . INT
    (30) exp -> . DOUBLE
    (31) exp -> . CHAR
    (32) exp -> . STRING
    (33) exp -> . BOOL
    (34) exp -> . IDENTIFIER

    MINUS           shift and go to state 9
    LPARAN          shift and go to state 8
    NOT             shift and go to state 10
    INT             shift and go to state 11
    DOUBLE          shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    IDENTIFIER      shift and go to state 37

    exp                            shift and go to state 58
    exps                           shift and go to state 63

state 63

    (9) exps -> exp COMMA exps .

    RPARAN          reduce using rule 9 (exps -> exp COMMA exps .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 45 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 45 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 45 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 45 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 45 resolved as shift
WARNING: shift/reduce conflict for POWER in state 45 resolved as shift
WARNING: shift/reduce conflict for LE in state 45 resolved as shift
WARNING: shift/reduce conflict for GE in state 45 resolved as shift
WARNING: shift/reduce conflict for ISEQUAL in state 45 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 45 resolved as shift
WARNING: shift/reduce conflict for LT in state 45 resolved as shift
WARNING: shift/reduce conflict for GT in state 45 resolved as shift
WARNING: shift/reduce conflict for AND in state 45 resolved as shift
WARNING: shift/reduce conflict for OR in state 45 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 50 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 50 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 50 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 50 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 50 resolved as shift
WARNING: shift/reduce conflict for POWER in state 50 resolved as shift
WARNING: shift/reduce conflict for LE in state 50 resolved as shift
WARNING: shift/reduce conflict for GE in state 50 resolved as shift
WARNING: shift/reduce conflict for ISEQUAL in state 50 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 50 resolved as shift
WARNING: shift/reduce conflict for LT in state 50 resolved as shift
WARNING: shift/reduce conflict for GT in state 50 resolved as shift
WARNING: shift/reduce conflict for AND in state 50 resolved as shift
WARNING: shift/reduce conflict for OR in state 50 resolved as shift
