
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftISEQUALleftLTLEGTGEleftPLUSMINUSleftMULTIPLYDIVIDErightNOTAND CHAR COMMA DECREMENT DIVIDE DOUBLE EQUAL GE GT IDENTIFIER INCREMENT INT ISEQUAL LE LPARAN LT MINUS MODULO MULTIPLY NOT NOTEQUAL OR PLUS POWER PRINT RPARAN SEMICOLON STRINGline : stmtsstmts : stmt\n             | stmt SEMICOLON stmts\n    stmt : expstmt : IDENTIFIER EQUAL expstmt : PRINT LPARAN exps RPARANexps : exp\n            | exp COMMA exps\n    \n    exp : exp PLUS exp\n        | exp MINUS exp\n        | exp MULTIPLY exp\n        | exp DIVIDE exp\n        | exp MODULO exp\n        | exp POWER exp\n        | exp LE exp\n        | exp GE exp\n        | exp ISEQUAL exp\n        | exp NOTEQUAL exp\n        | exp LT exp\n        | exp GT exp\n        | exp AND exp\n        | exp OR expexp : LPARAN exp RPARANexp : NOT expexp : INTexp : DOUBLEexp : CHARexp : STRINGexp : IDENTIFIER'
    
_lr_action_items = {'IDENTIFIER':([0,7,8,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,53,],[5,31,31,5,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'PRINT':([0,13,],[6,6,]),'LPARAN':([0,6,7,8,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,53,],[7,29,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'NOT':([0,7,8,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,53,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'INT':([0,7,8,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,53,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'DOUBLE':([0,7,8,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,53,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'CHAR':([0,7,8,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,53,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'STRING':([0,7,8,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,53,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'$end':([1,2,3,4,5,9,10,11,12,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,52,],[0,-1,-2,-4,-29,-25,-26,-27,-28,-29,-24,-3,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-5,-23,-6,]),'SEMICOLON':([3,4,5,9,10,11,12,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,52,],[13,-4,-29,-25,-26,-27,-28,-29,-24,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-5,-23,-6,]),'PLUS':([4,5,9,10,11,12,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,],[14,-29,-25,-26,-27,-28,14,-29,-24,-9,-10,-11,-12,14,14,14,14,14,14,14,14,14,14,14,14,-23,]),'MINUS':([4,5,9,10,11,12,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,],[15,-29,-25,-26,-27,-28,15,-29,-24,-9,-10,-11,-12,15,15,15,15,15,15,15,15,15,15,15,15,-23,]),'MULTIPLY':([4,5,9,10,11,12,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,],[16,-29,-25,-26,-27,-28,16,-29,-24,16,16,-11,-12,16,16,16,16,16,16,16,16,16,16,16,16,-23,]),'DIVIDE':([4,5,9,10,11,12,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,],[17,-29,-25,-26,-27,-28,17,-29,-24,17,17,-11,-12,17,17,17,17,17,17,17,17,17,17,17,17,-23,]),'MODULO':([4,5,9,10,11,12,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,],[18,-29,-25,-26,-27,-28,18,-29,-24,-9,-10,-11,-12,18,18,-15,-16,-17,18,-19,-20,-21,-22,18,18,-23,]),'POWER':([4,5,9,10,11,12,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,],[19,-29,-25,-26,-27,-28,19,-29,-24,-9,-10,-11,-12,19,19,-15,-16,-17,19,-19,-20,-21,-22,19,19,-23,]),'LE':([4,5,9,10,11,12,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,],[20,-29,-25,-26,-27,-28,20,-29,-24,-9,-10,-11,-12,20,20,-15,-16,20,20,-19,-20,20,20,20,20,-23,]),'GE':([4,5,9,10,11,12,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,],[21,-29,-25,-26,-27,-28,21,-29,-24,-9,-10,-11,-12,21,21,-15,-16,21,21,-19,-20,21,21,21,21,-23,]),'ISEQUAL':([4,5,9,10,11,12,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,],[22,-29,-25,-26,-27,-28,22,-29,-24,-9,-10,-11,-12,22,22,-15,-16,-17,22,-19,-20,22,22,22,22,-23,]),'NOTEQUAL':([4,5,9,10,11,12,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,],[23,-29,-25,-26,-27,-28,23,-29,-24,-9,-10,-11,-12,23,23,-15,-16,-17,23,-19,-20,-21,-22,23,23,-23,]),'LT':([4,5,9,10,11,12,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,],[24,-29,-25,-26,-27,-28,24,-29,-24,-9,-10,-11,-12,24,24,-15,-16,24,24,-19,-20,24,24,24,24,-23,]),'GT':([4,5,9,10,11,12,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,],[25,-29,-25,-26,-27,-28,25,-29,-24,-9,-10,-11,-12,25,25,-15,-16,25,25,-19,-20,25,25,25,25,-23,]),'AND':([4,5,9,10,11,12,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,],[26,-29,-25,-26,-27,-28,26,-29,-24,-9,-10,-11,-12,26,26,-15,-16,-17,26,-19,-20,-21,26,26,26,-23,]),'OR':([4,5,9,10,11,12,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,],[27,-29,-25,-26,-27,-28,27,-29,-24,-9,-10,-11,-12,27,27,-15,-16,-17,27,-19,-20,-21,-22,27,27,-23,]),'EQUAL':([5,],[28,]),'RPARAN':([9,10,11,12,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,50,51,54,],[-25,-26,-27,-28,51,-29,-24,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,52,-7,-23,-8,]),'COMMA':([9,10,11,12,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,50,51,],[-25,-26,-27,-28,-29,-24,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,53,-23,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'line':([0,],[1,]),'stmts':([0,13,],[2,33,]),'stmt':([0,13,],[3,3,]),'exp':([0,7,8,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,53,],[4,30,32,4,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,50,]),'exps':([29,53,],[49,54,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> line","S'",1,None,None,None),
  ('line -> stmts','line',1,'p_stmt_multiline','parser.py',56),
  ('stmts -> stmt','stmts',1,'p_stmt_end','parser.py',60),
  ('stmts -> stmt SEMICOLON stmts','stmts',3,'p_stmt_end','parser.py',61),
  ('stmt -> exp','stmt',1,'p_stmt_exp','parser.py',69),
  ('stmt -> IDENTIFIER EQUAL exp','stmt',3,'p_stmt_assign','parser.py',73),
  ('stmt -> PRINT LPARAN exps RPARAN','stmt',4,'p_stmt_print','parser.py',79),
  ('exps -> exp','exps',1,'p_stmt_many_exps','parser.py',83),
  ('exps -> exp COMMA exps','exps',3,'p_stmt_many_exps','parser.py',84),
  ('exp -> exp PLUS exp','exp',3,'p_exp_binop','parser.py',99),
  ('exp -> exp MINUS exp','exp',3,'p_exp_binop','parser.py',100),
  ('exp -> exp MULTIPLY exp','exp',3,'p_exp_binop','parser.py',101),
  ('exp -> exp DIVIDE exp','exp',3,'p_exp_binop','parser.py',102),
  ('exp -> exp MODULO exp','exp',3,'p_exp_binop','parser.py',103),
  ('exp -> exp POWER exp','exp',3,'p_exp_binop','parser.py',104),
  ('exp -> exp LE exp','exp',3,'p_exp_binop','parser.py',105),
  ('exp -> exp GE exp','exp',3,'p_exp_binop','parser.py',106),
  ('exp -> exp ISEQUAL exp','exp',3,'p_exp_binop','parser.py',107),
  ('exp -> exp NOTEQUAL exp','exp',3,'p_exp_binop','parser.py',108),
  ('exp -> exp LT exp','exp',3,'p_exp_binop','parser.py',109),
  ('exp -> exp GT exp','exp',3,'p_exp_binop','parser.py',110),
  ('exp -> exp AND exp','exp',3,'p_exp_binop','parser.py',111),
  ('exp -> exp OR exp','exp',3,'p_exp_binop','parser.py',112),
  ('exp -> LPARAN exp RPARAN','exp',3,'p_exp_paran','parser.py',117),
  ('exp -> NOT exp','exp',2,'p_exp_not','parser.py',121),
  ('exp -> INT','exp',1,'p_exp_int','parser.py',131),
  ('exp -> DOUBLE','exp',1,'p_exp_double','parser.py',135),
  ('exp -> CHAR','exp',1,'p_exp_char','parser.py',139),
  ('exp -> STRING','exp',1,'p_exp_string','parser.py',143),
  ('exp -> IDENTIFIER','exp',1,'p_exp_identifier','parser.py',147),
]
