
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftISEQUALleftLTLEGTGEleftPLUSMINUSleftMULTIPLYDIVIDEleftPOWERrightNOTAND BOOL CHAR COMMA DECREMENT DIVIDE DOUBLE EQUAL GE GT IDENTIFIER INCREMENT INT ISEQUAL LE LPARAN LT MINUS MODULO MULTIPLY NOT NOTEQUAL OR PLUS POWER PRINT RPARAN SEMICOLON STRING VARTYPEline : stmtsstmts : stmt\n             | stmt SEMICOLON stmts\n    stmt : expstmt : VARTYPE IDENTIFIER EQUAL expstmt : IDENTIFIER EQUAL expstmt : PRINT LPARAN exps RPARANexps : exp\n            | exp COMMA exps\n    stmt : IDENTIFIER INCREMENTstmt : IDENTIFIER DECREMENTexp : MINUS IDENTIFIER\n    exp : exp PLUS exp\n        | exp MINUS exp\n        | exp MULTIPLY exp\n        | exp DIVIDE exp\n        | exp MODULO exp\n        | exp POWER exp\n        | exp LE exp\n        | exp GE exp\n        | exp ISEQUAL exp\n        | exp NOTEQUAL exp\n        | exp LT exp\n        | exp GT exp\n        | exp AND exp\n        | exp OR expexp : LPARAN exp RPARANexp : NOT expexp : INTexp : DOUBLEexp : CHARexp : STRINGexp : BOOLexp : IDENTIFIER'
    
_lr_action_items = {'VARTYPE':([0,16,],[5,5,]),'IDENTIFIER':([0,5,8,9,10,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,35,55,62,],[6,31,37,38,37,6,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'PRINT':([0,16,],[7,7,]),'MINUS':([0,4,6,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,35,36,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,60,62,],[9,18,-34,9,9,-29,-30,-31,-32,-33,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,18,-34,-12,-28,-13,-14,-15,-16,18,-18,18,18,18,18,18,18,18,18,9,18,18,-27,18,9,]),'LPARAN':([0,7,8,10,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,35,55,62,],[8,35,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'NOT':([0,8,10,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,35,55,62,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'INT':([0,8,10,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,35,55,62,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'DOUBLE':([0,8,10,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,35,55,62,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'CHAR':([0,8,10,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,35,55,62,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'STRING':([0,8,10,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,35,55,62,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'BOOL':([0,8,10,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,35,55,62,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'$end':([1,2,3,4,6,11,12,13,14,15,33,34,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,56,59,60,61,],[0,-1,-2,-4,-34,-29,-30,-31,-32,-33,-10,-11,-34,-12,-28,-3,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-6,-27,-5,-7,]),'SEMICOLON':([3,4,6,11,12,13,14,15,33,34,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,56,59,60,61,],[16,-4,-34,-29,-30,-31,-32,-33,-10,-11,-34,-12,-28,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-6,-27,-5,-7,]),'PLUS':([4,6,11,12,13,14,15,36,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,56,58,59,60,],[17,-34,-29,-30,-31,-32,-33,17,-34,-12,-28,-13,-14,-15,-16,17,-18,17,17,17,17,17,17,17,17,17,17,-27,17,]),'MULTIPLY':([4,6,11,12,13,14,15,36,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,56,58,59,60,],[19,-34,-29,-30,-31,-32,-33,19,-34,-12,-28,19,19,-15,-16,19,-18,19,19,19,19,19,19,19,19,19,19,-27,19,]),'DIVIDE':([4,6,11,12,13,14,15,36,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,56,58,59,60,],[20,-34,-29,-30,-31,-32,-33,20,-34,-12,-28,20,20,-15,-16,20,-18,20,20,20,20,20,20,20,20,20,20,-27,20,]),'MODULO':([4,6,11,12,13,14,15,36,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,56,58,59,60,],[21,-34,-29,-30,-31,-32,-33,21,-34,-12,-28,-13,-14,-15,-16,21,-18,-19,-20,-21,21,-23,-24,-25,-26,21,21,-27,21,]),'POWER':([4,6,11,12,13,14,15,36,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,56,58,59,60,],[22,-34,-29,-30,-31,-32,-33,22,-34,-12,-28,22,22,22,22,22,-18,22,22,22,22,22,22,22,22,22,22,-27,22,]),'LE':([4,6,11,12,13,14,15,36,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,56,58,59,60,],[23,-34,-29,-30,-31,-32,-33,23,-34,-12,-28,-13,-14,-15,-16,23,-18,-19,-20,23,23,-23,-24,23,23,23,23,-27,23,]),'GE':([4,6,11,12,13,14,15,36,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,56,58,59,60,],[24,-34,-29,-30,-31,-32,-33,24,-34,-12,-28,-13,-14,-15,-16,24,-18,-19,-20,24,24,-23,-24,24,24,24,24,-27,24,]),'ISEQUAL':([4,6,11,12,13,14,15,36,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,56,58,59,60,],[25,-34,-29,-30,-31,-32,-33,25,-34,-12,-28,-13,-14,-15,-16,25,-18,-19,-20,-21,25,-23,-24,25,25,25,25,-27,25,]),'NOTEQUAL':([4,6,11,12,13,14,15,36,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,56,58,59,60,],[26,-34,-29,-30,-31,-32,-33,26,-34,-12,-28,-13,-14,-15,-16,26,-18,-19,-20,-21,26,-23,-24,-25,-26,26,26,-27,26,]),'LT':([4,6,11,12,13,14,15,36,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,56,58,59,60,],[27,-34,-29,-30,-31,-32,-33,27,-34,-12,-28,-13,-14,-15,-16,27,-18,-19,-20,27,27,-23,-24,27,27,27,27,-27,27,]),'GT':([4,6,11,12,13,14,15,36,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,56,58,59,60,],[28,-34,-29,-30,-31,-32,-33,28,-34,-12,-28,-13,-14,-15,-16,28,-18,-19,-20,28,28,-23,-24,28,28,28,28,-27,28,]),'AND':([4,6,11,12,13,14,15,36,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,56,58,59,60,],[29,-34,-29,-30,-31,-32,-33,29,-34,-12,-28,-13,-14,-15,-16,29,-18,-19,-20,-21,29,-23,-24,-25,29,29,29,-27,29,]),'OR':([4,6,11,12,13,14,15,36,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,56,58,59,60,],[30,-34,-29,-30,-31,-32,-33,30,-34,-12,-28,-13,-14,-15,-16,30,-18,-19,-20,-21,30,-23,-24,-25,-26,30,30,-27,30,]),'EQUAL':([6,31,],[32,55,]),'INCREMENT':([6,],[33,]),'DECREMENT':([6,],[34,]),'RPARAN':([11,12,13,14,15,36,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,57,58,59,63,],[-29,-30,-31,-32,-33,59,-34,-12,-28,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,61,-8,-27,-9,]),'COMMA':([11,12,13,14,15,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,58,59,],[-29,-30,-31,-32,-33,-34,-12,-28,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,62,-27,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'line':([0,],[1,]),'stmts':([0,16,],[2,40,]),'stmt':([0,16,],[3,3,]),'exp':([0,8,10,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,35,55,62,],[4,36,39,4,41,42,43,44,45,46,47,48,49,50,51,52,53,54,56,58,60,58,]),'exps':([35,62,],[57,63,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> line","S'",1,None,None,None),
  ('line -> stmts','line',1,'p_stmt_multiline','parser.py',52),
  ('stmts -> stmt','stmts',1,'p_stmt_end','parser.py',56),
  ('stmts -> stmt SEMICOLON stmts','stmts',3,'p_stmt_end','parser.py',57),
  ('stmt -> exp','stmt',1,'p_stmt_exp','parser.py',65),
  ('stmt -> VARTYPE IDENTIFIER EQUAL exp','stmt',4,'p_stmt_assign','parser.py',69),
  ('stmt -> IDENTIFIER EQUAL exp','stmt',3,'p_stmt_change','parser.py',73),
  ('stmt -> PRINT LPARAN exps RPARAN','stmt',4,'p_stmt_print','parser.py',77),
  ('exps -> exp','exps',1,'p_stmt_many_exps','parser.py',81),
  ('exps -> exp COMMA exps','exps',3,'p_stmt_many_exps','parser.py',82),
  ('stmt -> IDENTIFIER INCREMENT','stmt',2,'p_stmt_increment','parser.py',90),
  ('stmt -> IDENTIFIER DECREMENT','stmt',2,'p_stmt_decrement','parser.py',94),
  ('exp -> MINUS IDENTIFIER','exp',2,'p_exp_neg_number','parser.py',98),
  ('exp -> exp PLUS exp','exp',3,'p_exp_binop','parser.py',103),
  ('exp -> exp MINUS exp','exp',3,'p_exp_binop','parser.py',104),
  ('exp -> exp MULTIPLY exp','exp',3,'p_exp_binop','parser.py',105),
  ('exp -> exp DIVIDE exp','exp',3,'p_exp_binop','parser.py',106),
  ('exp -> exp MODULO exp','exp',3,'p_exp_binop','parser.py',107),
  ('exp -> exp POWER exp','exp',3,'p_exp_binop','parser.py',108),
  ('exp -> exp LE exp','exp',3,'p_exp_binop','parser.py',109),
  ('exp -> exp GE exp','exp',3,'p_exp_binop','parser.py',110),
  ('exp -> exp ISEQUAL exp','exp',3,'p_exp_binop','parser.py',111),
  ('exp -> exp NOTEQUAL exp','exp',3,'p_exp_binop','parser.py',112),
  ('exp -> exp LT exp','exp',3,'p_exp_binop','parser.py',113),
  ('exp -> exp GT exp','exp',3,'p_exp_binop','parser.py',114),
  ('exp -> exp AND exp','exp',3,'p_exp_binop','parser.py',115),
  ('exp -> exp OR exp','exp',3,'p_exp_binop','parser.py',116),
  ('exp -> LPARAN exp RPARAN','exp',3,'p_exp_paran','parser.py',120),
  ('exp -> NOT exp','exp',2,'p_exp_not','parser.py',124),
  ('exp -> INT','exp',1,'p_exp_int','parser.py',128),
  ('exp -> DOUBLE','exp',1,'p_exp_double','parser.py',132),
  ('exp -> CHAR','exp',1,'p_exp_char','parser.py',136),
  ('exp -> STRING','exp',1,'p_exp_string','parser.py',140),
  ('exp -> BOOL','exp',1,'p_exp_bool','parser.py',144),
  ('exp -> IDENTIFIER','exp',1,'p_exp_identifier','parser.py',148),
]
