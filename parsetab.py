
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftISEQUALleftLTLEGTGEleftPLUSMINUSleftMULTIPLYDIVIDErightNOTAND BOOL CHAR COMMA DECREMENT DIVIDE DOUBLE EQUAL GE GT IDENTIFIER INCREMENT INT ISEQUAL LE LPARAN LT MINUS MODULO MULTIPLY NOT NOTEQUAL OR PLUS POWER PRINT RPARAN SEMICOLON STRING VARTYPEline : stmtsstmts : stmt\n             | stmt SEMICOLON stmts\n    stmt : expstmt : VARTYPE IDENTIFIER EQUAL expstmt : IDENTIFIER EQUAL expstmt : PRINT LPARAN exps RPARANexps : exp\n            | exp COMMA exps\n    \n    exp : exp PLUS exp\n        | exp MINUS exp\n        | exp MULTIPLY exp\n        | exp DIVIDE exp\n        | exp MODULO exp\n        | exp POWER exp\n        | exp LE exp\n        | exp GE exp\n        | exp ISEQUAL exp\n        | exp NOTEQUAL exp\n        | exp LT exp\n        | exp GT exp\n        | exp AND exp\n        | exp OR expexp : LPARAN exp RPARANexp : NOT expexp : INTexp : DOUBLEexp : CHARexp : STRINGexp : BOOLexp : IDENTIFIER'
    
_lr_action_items = {'VARTYPE':([0,15,],[5,5,]),'IDENTIFIER':([0,5,8,9,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,51,58,],[6,30,34,34,6,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'PRINT':([0,15,],[7,7,]),'LPARAN':([0,7,8,9,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,51,58,],[8,32,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'NOT':([0,8,9,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,51,58,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'INT':([0,8,9,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,51,58,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'DOUBLE':([0,8,9,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,51,58,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'CHAR':([0,8,9,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,51,58,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'STRING':([0,8,9,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,51,58,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'BOOL':([0,8,9,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,51,58,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'$end':([1,2,3,4,6,10,11,12,13,14,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,55,56,57,],[0,-1,-2,-4,-31,-26,-27,-28,-29,-30,-31,-25,-3,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-6,-24,-5,-7,]),'SEMICOLON':([3,4,6,10,11,12,13,14,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,55,56,57,],[15,-4,-31,-26,-27,-28,-29,-30,-31,-25,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-6,-24,-5,-7,]),'PLUS':([4,6,10,11,12,13,14,33,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,54,55,56,],[16,-31,-26,-27,-28,-29,-30,16,-31,-25,-10,-11,-12,-13,16,16,16,16,16,16,16,16,16,16,16,16,-24,16,]),'MINUS':([4,6,10,11,12,13,14,33,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,54,55,56,],[17,-31,-26,-27,-28,-29,-30,17,-31,-25,-10,-11,-12,-13,17,17,17,17,17,17,17,17,17,17,17,17,-24,17,]),'MULTIPLY':([4,6,10,11,12,13,14,33,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,54,55,56,],[18,-31,-26,-27,-28,-29,-30,18,-31,-25,18,18,-12,-13,18,18,18,18,18,18,18,18,18,18,18,18,-24,18,]),'DIVIDE':([4,6,10,11,12,13,14,33,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,54,55,56,],[19,-31,-26,-27,-28,-29,-30,19,-31,-25,19,19,-12,-13,19,19,19,19,19,19,19,19,19,19,19,19,-24,19,]),'MODULO':([4,6,10,11,12,13,14,33,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,54,55,56,],[20,-31,-26,-27,-28,-29,-30,20,-31,-25,-10,-11,-12,-13,20,20,-16,-17,-18,20,-20,-21,-22,-23,20,20,-24,20,]),'POWER':([4,6,10,11,12,13,14,33,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,54,55,56,],[21,-31,-26,-27,-28,-29,-30,21,-31,-25,-10,-11,-12,-13,21,21,-16,-17,-18,21,-20,-21,-22,-23,21,21,-24,21,]),'LE':([4,6,10,11,12,13,14,33,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,54,55,56,],[22,-31,-26,-27,-28,-29,-30,22,-31,-25,-10,-11,-12,-13,22,22,-16,-17,22,22,-20,-21,22,22,22,22,-24,22,]),'GE':([4,6,10,11,12,13,14,33,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,54,55,56,],[23,-31,-26,-27,-28,-29,-30,23,-31,-25,-10,-11,-12,-13,23,23,-16,-17,23,23,-20,-21,23,23,23,23,-24,23,]),'ISEQUAL':([4,6,10,11,12,13,14,33,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,54,55,56,],[24,-31,-26,-27,-28,-29,-30,24,-31,-25,-10,-11,-12,-13,24,24,-16,-17,-18,24,-20,-21,24,24,24,24,-24,24,]),'NOTEQUAL':([4,6,10,11,12,13,14,33,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,54,55,56,],[25,-31,-26,-27,-28,-29,-30,25,-31,-25,-10,-11,-12,-13,25,25,-16,-17,-18,25,-20,-21,-22,-23,25,25,-24,25,]),'LT':([4,6,10,11,12,13,14,33,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,54,55,56,],[26,-31,-26,-27,-28,-29,-30,26,-31,-25,-10,-11,-12,-13,26,26,-16,-17,26,26,-20,-21,26,26,26,26,-24,26,]),'GT':([4,6,10,11,12,13,14,33,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,54,55,56,],[27,-31,-26,-27,-28,-29,-30,27,-31,-25,-10,-11,-12,-13,27,27,-16,-17,27,27,-20,-21,27,27,27,27,-24,27,]),'AND':([4,6,10,11,12,13,14,33,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,54,55,56,],[28,-31,-26,-27,-28,-29,-30,28,-31,-25,-10,-11,-12,-13,28,28,-16,-17,-18,28,-20,-21,-22,28,28,28,-24,28,]),'OR':([4,6,10,11,12,13,14,33,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,54,55,56,],[29,-31,-26,-27,-28,-29,-30,29,-31,-25,-10,-11,-12,-13,29,29,-16,-17,-18,29,-20,-21,-22,-23,29,29,-24,29,]),'EQUAL':([6,30,],[31,51,]),'RPARAN':([10,11,12,13,14,33,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,53,54,55,59,],[-26,-27,-28,-29,-30,55,-31,-25,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,57,-8,-24,-9,]),'COMMA':([10,11,12,13,14,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,54,55,],[-26,-27,-28,-29,-30,-31,-25,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,58,-24,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'line':([0,],[1,]),'stmts':([0,15,],[2,36,]),'stmt':([0,15,],[3,3,]),'exp':([0,8,9,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,51,58,],[4,33,35,4,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,54,56,54,]),'exps':([32,58,],[53,59,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> line","S'",1,None,None,None),
  ('line -> stmts','line',1,'p_stmt_multiline','parser.py',51),
  ('stmts -> stmt','stmts',1,'p_stmt_end','parser.py',55),
  ('stmts -> stmt SEMICOLON stmts','stmts',3,'p_stmt_end','parser.py',56),
  ('stmt -> exp','stmt',1,'p_stmt_exp','parser.py',64),
  ('stmt -> VARTYPE IDENTIFIER EQUAL exp','stmt',4,'p_stmt_assign','parser.py',68),
  ('stmt -> IDENTIFIER EQUAL exp','stmt',3,'p_stmt_change','parser.py',72),
  ('stmt -> PRINT LPARAN exps RPARAN','stmt',4,'p_stmt_print','parser.py',76),
  ('exps -> exp','exps',1,'p_stmt_many_exps','parser.py',80),
  ('exps -> exp COMMA exps','exps',3,'p_stmt_many_exps','parser.py',81),
  ('exp -> exp PLUS exp','exp',3,'p_exp_binop','parser.py',90),
  ('exp -> exp MINUS exp','exp',3,'p_exp_binop','parser.py',91),
  ('exp -> exp MULTIPLY exp','exp',3,'p_exp_binop','parser.py',92),
  ('exp -> exp DIVIDE exp','exp',3,'p_exp_binop','parser.py',93),
  ('exp -> exp MODULO exp','exp',3,'p_exp_binop','parser.py',94),
  ('exp -> exp POWER exp','exp',3,'p_exp_binop','parser.py',95),
  ('exp -> exp LE exp','exp',3,'p_exp_binop','parser.py',96),
  ('exp -> exp GE exp','exp',3,'p_exp_binop','parser.py',97),
  ('exp -> exp ISEQUAL exp','exp',3,'p_exp_binop','parser.py',98),
  ('exp -> exp NOTEQUAL exp','exp',3,'p_exp_binop','parser.py',99),
  ('exp -> exp LT exp','exp',3,'p_exp_binop','parser.py',100),
  ('exp -> exp GT exp','exp',3,'p_exp_binop','parser.py',101),
  ('exp -> exp AND exp','exp',3,'p_exp_binop','parser.py',102),
  ('exp -> exp OR exp','exp',3,'p_exp_binop','parser.py',103),
  ('exp -> LPARAN exp RPARAN','exp',3,'p_exp_paran','parser.py',107),
  ('exp -> NOT exp','exp',2,'p_exp_not','parser.py',111),
  ('exp -> INT','exp',1,'p_exp_int','parser.py',115),
  ('exp -> DOUBLE','exp',1,'p_exp_double','parser.py',119),
  ('exp -> CHAR','exp',1,'p_exp_char','parser.py',123),
  ('exp -> STRING','exp',1,'p_exp_string','parser.py',127),
  ('exp -> BOOL','exp',1,'p_exp_bool','parser.py',131),
  ('exp -> IDENTIFIER','exp',1,'p_exp_identifier','parser.py',135),
]
