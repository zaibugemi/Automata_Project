
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftISEQUALleftLTLEGTGEleftPLUSMINUSleftMULTIPLYDIVIDErightNOTAND CHAR DECREMENT DIVIDE DOUBLE EQUAL GE GT IDENTIFIER INCREMENT INT ISEQUAL LE LPARAN LT MINUS MODULO MULTIPLY NOT NOTEQUAL OR PLUS POWER RPARAN STRINGstmt : IDENTIFIER EQUAL expstmt : exp\n    exp : exp PLUS exp\n        | exp MINUS exp\n        | exp MULTIPLY exp\n        | exp DIVIDE exp\n        | exp MODULO exp\n        | exp POWER exp\n        | exp LE exp\n        | exp GE exp\n        | exp ISEQUAL exp\n        | exp NOTEQUAL exp\n        | exp LT exp\n        | exp GT exp\n        | exp AND exp\n        | exp OR expexp : LPARAN exp RPARANexp : NOT expexp : INTexp : DOUBLEexp : CHARexp : STRINGexp : IDENTIFIER'
    
_lr_action_items = {'IDENTIFIER':([0,4,5,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,],[2,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'LPARAN':([0,4,5,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'NOT':([0,4,5,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'INT':([0,4,5,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'DOUBLE':([0,4,5,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'CHAR':([0,4,5,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'STRING':([0,4,5,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'$end':([1,2,3,6,7,8,9,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,],[0,-23,-2,-19,-20,-21,-22,-23,-18,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,]),'EQUAL':([2,],[10,]),'PLUS':([2,3,6,7,8,9,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,],[-23,11,-19,-20,-21,-22,11,-23,-18,11,-3,-4,-5,-6,11,11,11,11,11,11,11,11,11,11,-17,]),'MINUS':([2,3,6,7,8,9,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,],[-23,12,-19,-20,-21,-22,12,-23,-18,12,-3,-4,-5,-6,12,12,12,12,12,12,12,12,12,12,-17,]),'MULTIPLY':([2,3,6,7,8,9,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,],[-23,13,-19,-20,-21,-22,13,-23,-18,13,13,13,-5,-6,13,13,13,13,13,13,13,13,13,13,-17,]),'DIVIDE':([2,3,6,7,8,9,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,],[-23,14,-19,-20,-21,-22,14,-23,-18,14,14,14,-5,-6,14,14,14,14,14,14,14,14,14,14,-17,]),'MODULO':([2,3,6,7,8,9,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,],[-23,15,-19,-20,-21,-22,15,-23,-18,15,-3,-4,-5,-6,15,15,-9,-10,-11,15,-13,-14,-15,-16,-17,]),'POWER':([2,3,6,7,8,9,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,],[-23,16,-19,-20,-21,-22,16,-23,-18,16,-3,-4,-5,-6,16,16,-9,-10,-11,16,-13,-14,-15,-16,-17,]),'LE':([2,3,6,7,8,9,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,],[-23,17,-19,-20,-21,-22,17,-23,-18,17,-3,-4,-5,-6,17,17,-9,-10,17,17,-13,-14,17,17,-17,]),'GE':([2,3,6,7,8,9,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,],[-23,18,-19,-20,-21,-22,18,-23,-18,18,-3,-4,-5,-6,18,18,-9,-10,18,18,-13,-14,18,18,-17,]),'ISEQUAL':([2,3,6,7,8,9,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,],[-23,19,-19,-20,-21,-22,19,-23,-18,19,-3,-4,-5,-6,19,19,-9,-10,-11,19,-13,-14,19,19,-17,]),'NOTEQUAL':([2,3,6,7,8,9,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,],[-23,20,-19,-20,-21,-22,20,-23,-18,20,-3,-4,-5,-6,20,20,-9,-10,-11,20,-13,-14,-15,-16,-17,]),'LT':([2,3,6,7,8,9,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,],[-23,21,-19,-20,-21,-22,21,-23,-18,21,-3,-4,-5,-6,21,21,-9,-10,21,21,-13,-14,21,21,-17,]),'GT':([2,3,6,7,8,9,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,],[-23,22,-19,-20,-21,-22,22,-23,-18,22,-3,-4,-5,-6,22,22,-9,-10,22,22,-13,-14,22,22,-17,]),'AND':([2,3,6,7,8,9,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,],[-23,23,-19,-20,-21,-22,23,-23,-18,23,-3,-4,-5,-6,23,23,-9,-10,-11,23,-13,-14,-15,23,-17,]),'OR':([2,3,6,7,8,9,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,],[-23,24,-19,-20,-21,-22,24,-23,-18,24,-3,-4,-5,-6,24,24,-9,-10,-11,24,-13,-14,-15,-16,-17,]),'RPARAN':([6,7,8,9,25,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,],[-19,-20,-21,-22,43,-23,-18,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'stmt':([0,],[1,]),'exp':([0,4,5,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,],[3,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> stmt","S'",1,None,None,None),
  ('stmt -> IDENTIFIER EQUAL exp','stmt',3,'p_stmt_assign','parser.py',52),
  ('stmt -> exp','stmt',1,'p_stmt_exp','parser.py',56),
  ('exp -> exp PLUS exp','exp',3,'p_exp_binop','parser.py',61),
  ('exp -> exp MINUS exp','exp',3,'p_exp_binop','parser.py',62),
  ('exp -> exp MULTIPLY exp','exp',3,'p_exp_binop','parser.py',63),
  ('exp -> exp DIVIDE exp','exp',3,'p_exp_binop','parser.py',64),
  ('exp -> exp MODULO exp','exp',3,'p_exp_binop','parser.py',65),
  ('exp -> exp POWER exp','exp',3,'p_exp_binop','parser.py',66),
  ('exp -> exp LE exp','exp',3,'p_exp_binop','parser.py',67),
  ('exp -> exp GE exp','exp',3,'p_exp_binop','parser.py',68),
  ('exp -> exp ISEQUAL exp','exp',3,'p_exp_binop','parser.py',69),
  ('exp -> exp NOTEQUAL exp','exp',3,'p_exp_binop','parser.py',70),
  ('exp -> exp LT exp','exp',3,'p_exp_binop','parser.py',71),
  ('exp -> exp GT exp','exp',3,'p_exp_binop','parser.py',72),
  ('exp -> exp AND exp','exp',3,'p_exp_binop','parser.py',73),
  ('exp -> exp OR exp','exp',3,'p_exp_binop','parser.py',74),
  ('exp -> LPARAN exp RPARAN','exp',3,'p_exp_paran','parser.py',79),
  ('exp -> NOT exp','exp',2,'p_exp_not','parser.py',83),
  ('exp -> INT','exp',1,'p_exp_int','parser.py',87),
  ('exp -> DOUBLE','exp',1,'p_exp_double','parser.py',91),
  ('exp -> CHAR','exp',1,'p_exp_char','parser.py',95),
  ('exp -> STRING','exp',1,'p_exp_string','parser.py',99),
  ('exp -> IDENTIFIER','exp',1,'p_exp_identifier','parser.py',103),
]
