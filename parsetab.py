
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftISEQUALleftLTLEGTGEleftPLUSMINUSleftMULTIPLYDIVIDErightNOTAND CHAR COMMA DECREMENT DIVIDE DOUBLE EQUAL GE GT IDENTIFIER INCREMENT INT ISEQUAL LE LPARAN LT MINUS MODULO MULTIPLY NOT NOTEQUAL OR PLUS POWER PRINT RPARAN STRINGstmt : IDENTIFIER EQUAL expstmt : PRINT LPARAN exps RPARANexps : exp\n            | exp COMMA exps\n    stmt : exp\n    exp : exp PLUS exp\n        | exp MINUS exp\n        | exp MULTIPLY exp\n        | exp DIVIDE exp\n        | exp MODULO exp\n        | exp POWER exp\n        | exp LE exp\n        | exp GE exp\n        | exp ISEQUAL exp\n        | exp NOTEQUAL exp\n        | exp LT exp\n        | exp GT exp\n        | exp AND exp\n        | exp OR expexp : LPARAN exp RPARANexp : NOT expexp : INTexp : DOUBLEexp : CHARexp : STRINGexp : IDENTIFIER'
    
_lr_action_items = {'IDENTIFIER':([0,5,6,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,49,],[2,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'PRINT':([0,],[4,]),'LPARAN':([0,4,5,6,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,49,],[5,26,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'NOT':([0,5,6,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,49,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'INT':([0,5,6,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,49,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'DOUBLE':([0,5,6,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,49,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'CHAR':([0,5,6,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,49,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'STRING':([0,5,6,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,49,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'$end':([1,2,3,7,8,9,10,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,47,48,],[0,-26,-5,-22,-23,-24,-25,-26,-21,-1,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-2,]),'EQUAL':([2,],[11,]),'PLUS':([2,3,7,8,9,10,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,],[-26,12,-22,-23,-24,-25,12,-26,-21,12,-6,-7,-8,-9,12,12,12,12,12,12,12,12,12,12,12,-20,]),'MINUS':([2,3,7,8,9,10,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,],[-26,13,-22,-23,-24,-25,13,-26,-21,13,-6,-7,-8,-9,13,13,13,13,13,13,13,13,13,13,13,-20,]),'MULTIPLY':([2,3,7,8,9,10,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,],[-26,14,-22,-23,-24,-25,14,-26,-21,14,14,14,-8,-9,14,14,14,14,14,14,14,14,14,14,14,-20,]),'DIVIDE':([2,3,7,8,9,10,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,],[-26,15,-22,-23,-24,-25,15,-26,-21,15,15,15,-8,-9,15,15,15,15,15,15,15,15,15,15,15,-20,]),'MODULO':([2,3,7,8,9,10,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,],[-26,16,-22,-23,-24,-25,16,-26,-21,16,-6,-7,-8,-9,16,16,-12,-13,-14,16,-16,-17,-18,-19,16,-20,]),'POWER':([2,3,7,8,9,10,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,],[-26,17,-22,-23,-24,-25,17,-26,-21,17,-6,-7,-8,-9,17,17,-12,-13,-14,17,-16,-17,-18,-19,17,-20,]),'LE':([2,3,7,8,9,10,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,],[-26,18,-22,-23,-24,-25,18,-26,-21,18,-6,-7,-8,-9,18,18,-12,-13,18,18,-16,-17,18,18,18,-20,]),'GE':([2,3,7,8,9,10,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,],[-26,19,-22,-23,-24,-25,19,-26,-21,19,-6,-7,-8,-9,19,19,-12,-13,19,19,-16,-17,19,19,19,-20,]),'ISEQUAL':([2,3,7,8,9,10,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,],[-26,20,-22,-23,-24,-25,20,-26,-21,20,-6,-7,-8,-9,20,20,-12,-13,-14,20,-16,-17,20,20,20,-20,]),'NOTEQUAL':([2,3,7,8,9,10,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,],[-26,21,-22,-23,-24,-25,21,-26,-21,21,-6,-7,-8,-9,21,21,-12,-13,-14,21,-16,-17,-18,-19,21,-20,]),'LT':([2,3,7,8,9,10,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,],[-26,22,-22,-23,-24,-25,22,-26,-21,22,-6,-7,-8,-9,22,22,-12,-13,22,22,-16,-17,22,22,22,-20,]),'GT':([2,3,7,8,9,10,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,],[-26,23,-22,-23,-24,-25,23,-26,-21,23,-6,-7,-8,-9,23,23,-12,-13,23,23,-16,-17,23,23,23,-20,]),'AND':([2,3,7,8,9,10,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,],[-26,24,-22,-23,-24,-25,24,-26,-21,24,-6,-7,-8,-9,24,24,-12,-13,-14,24,-16,-17,-18,24,24,-20,]),'OR':([2,3,7,8,9,10,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,],[-26,25,-22,-23,-24,-25,25,-26,-21,25,-6,-7,-8,-9,25,25,-12,-13,-14,25,-16,-17,-18,-19,25,-20,]),'RPARAN':([7,8,9,10,27,28,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,50,],[-22,-23,-24,-25,47,-26,-21,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,48,-3,-20,-4,]),'COMMA':([7,8,9,10,28,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,],[-22,-23,-24,-25,-26,-21,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,49,-20,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'stmt':([0,],[1,]),'exp':([0,5,6,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,49,],[3,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,46,]),'exps':([26,49,],[45,50,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> stmt","S'",1,None,None,None),
  ('stmt -> IDENTIFIER EQUAL exp','stmt',3,'p_stmt_assign','parser.py',56),
  ('stmt -> PRINT LPARAN exps RPARAN','stmt',4,'p_stmt_print','parser.py',60),
  ('exps -> exp','exps',1,'p_stmt_many_exps','parser.py',64),
  ('exps -> exp COMMA exps','exps',3,'p_stmt_many_exps','parser.py',65),
  ('stmt -> exp','stmt',1,'p_stmt_exp','parser.py',79),
  ('exp -> exp PLUS exp','exp',3,'p_exp_binop','parser.py',84),
  ('exp -> exp MINUS exp','exp',3,'p_exp_binop','parser.py',85),
  ('exp -> exp MULTIPLY exp','exp',3,'p_exp_binop','parser.py',86),
  ('exp -> exp DIVIDE exp','exp',3,'p_exp_binop','parser.py',87),
  ('exp -> exp MODULO exp','exp',3,'p_exp_binop','parser.py',88),
  ('exp -> exp POWER exp','exp',3,'p_exp_binop','parser.py',89),
  ('exp -> exp LE exp','exp',3,'p_exp_binop','parser.py',90),
  ('exp -> exp GE exp','exp',3,'p_exp_binop','parser.py',91),
  ('exp -> exp ISEQUAL exp','exp',3,'p_exp_binop','parser.py',92),
  ('exp -> exp NOTEQUAL exp','exp',3,'p_exp_binop','parser.py',93),
  ('exp -> exp LT exp','exp',3,'p_exp_binop','parser.py',94),
  ('exp -> exp GT exp','exp',3,'p_exp_binop','parser.py',95),
  ('exp -> exp AND exp','exp',3,'p_exp_binop','parser.py',96),
  ('exp -> exp OR exp','exp',3,'p_exp_binop','parser.py',97),
  ('exp -> LPARAN exp RPARAN','exp',3,'p_exp_paran','parser.py',102),
  ('exp -> NOT exp','exp',2,'p_exp_not','parser.py',106),
  ('exp -> INT','exp',1,'p_exp_int','parser.py',116),
  ('exp -> DOUBLE','exp',1,'p_exp_double','parser.py',120),
  ('exp -> CHAR','exp',1,'p_exp_char','parser.py',124),
  ('exp -> STRING','exp',1,'p_exp_string','parser.py',128),
  ('exp -> IDENTIFIER','exp',1,'p_exp_identifier','parser.py',132),
]
